(window.webpackJsonp=window.webpackJsonp||[]).push([[4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],{181:function(n,t){n.exports={attributes:{title:"Bắt đầu với Vue.js",slug:"bat-dau-voi-vue",date:"2018-12-03T20:19:52.000Z",tags:["javascript","vue","css"]},html:'<p><a href="https://vuejs.org/"><strong>Vue.js</strong></a> là một thư viện JavaScript giúp bạn dễ dàng xây dựng các giao diện (UI) từ đơn giản đến phức tạp.</p>\n<p>Để bắt đầu với Vue.js bạn cần trang bị cho một những kiến thức cơ bản về HTML, CSS và JavaScript là nền tảng giúp bạn dễ dàng làm quen với Vue.js</p>\n<h3>Vue.js có gì hay?</h3>\n<p>Điểm đầu tiên tôi thích ở Vue.js là một trong số ít những thư viện JavaScript phát triển mà tài liệu hỗ trợ ngôn ngữ <a href="https://vi.vuejs.org/">tiếng Việt</a>. Cái này giúp ích rất nhiều, đặc biệt những bạn vừa làm quen với Vue.js và JavaScript. Bên cạnh đó tài liệu Vue.js còn hỗ trợ nhiều ngôn ngữ khác như <a href="https://vuejs.org/">tiếng Anh</a>, <a href="https://cn.vuejs.org/">tiếng Trung</a>, <a href="https://jp.vuejs.org">tiếng Nhật</a>, <a href="https://ru.vuejs.org">tiếng Nga</a>, <a href="https://kr.vuejs.org">tiếng Hàn Quốc</a>, <a href="https://br.vuejs.org">tiếng Bồ Đào Nha</a>, <a href="https://fr.vuejs.org">tiếng Pháp</a>.</p>\n<p>Ngoài ra, Vue.js còn có nhiều ưu điểm:</p>\n<ul>\n<li>Dễ dàng để bắt đầu (với nền tảng HTML, CSS và JavaScript)</li>\n<li>Kết hợp linh hoạt với <code>SVG</code> để xây dựng <code>icons</code>, <code>charts</code></li>\n<li>Giúp dễ dàng tái sử dụng thông qua các Component (tôi sẽ giới thiệu thêm ở bên dưới)</li>\n<li>Tích hợp dễ dàng với các thư viện JavaScript khác như <a href="https://date-fns.org/">date-fns</a>, <a href="https://greensock.com/gsap">gsap</a>, <a href="https://d3js.org/">d3.js</a>, <a href="https://threejs.org/">three.js</a>...</li>\n</ul>\n<h3>Hệ sinh thái</h3>\n<p>Vue.js có một hệ sinh thái rất mạnh mẽ, giúp bạn lựa chọn viết cả ứng dụng web, mobile hay cả desktop:</p>\n<ul>\n<li><a href="https://cli.vuejs.org/">Vue CLI</a> một công cụ chuẩn được phát triển các ứng dụng Vue.js</li>\n<li><a href="https://github.com/vuejs/vue-devtools">Vue Devtools</a> là công cụ giúp bạn <code>debbuging</code> ứng dụng viết bằng Vue.js</li>\n<li>Single Page Application (SPA) với <a href="https://router.vuejs.org/">Vue-Router</a> hoặc <a href="https://ssr.vuejs.org/">Server-Side Rendering</a> cho việc tối ưu SEO và cập nhật các nội dung một cách nhanh chóng</li>\n<li>Quản lý các trạng thái và thư viện trong Vue.js với <a href="https://vuex.vuejs.org/">Vuex</a></li>\n<li>Viết mobile application bằng <a href="https://github.com/ionic-team/ionic/tree/master/vue">Ionic Vue</a> hoặc <a href="https://www.nativescript.org/vue">NativeScript-Vue</a></li>\n<li>Hoặc có thể xây dựng ứng dựng desktop cho Windows, OS X và Linux bằng <a href="https://vuido.mimec.org/">Vuido</a></li>\n</ul>\n<h3>Ứng dụng đầu tiên với Vue.js</h3>\n<p>Ở trên tôi đã giới thiệu các bạn về <strong>Vue CLI</strong> một công cụ để phát triển các ứng dụng Vue.js nhưng ở đây để dễ dàng làm quen tôi sử dụng cú pháp thuần JavaScript và HTML.</p>\n<p>Đầu tiên bạn cần nhúng thư viện Vue.js và trong thẻ <code>&lt;script&gt;</code> và khai báo như sau:</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{ msg }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//unpkg.com/vue@2.5.17/dist/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">new</span> Vue({\n    <span class="hljs-attr">el</span>: <span class="hljs-string">\'#app\'</span>,\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">msg</span>: <span class="hljs-string">\'Hello Vue.js\'</span>\n      }\n    }\n  });\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre>\n<p>và ta sẽ được kết quả</p>\n<p><iframe src="https://codesandbox.io/embed/vue-hello-rfi54?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h3>Làm quen với Vue.js</h3>\n<p>Để bắt đầu làm quen với Vue.js bạn cần chú ý những khái niệm chính sau:</p>\n<ul>\n<li>Directives</li>\n<li>Components</li>\n<li>Transitions và Animations</li>\n</ul>\n<h4>1. Directives</h4>\n<p>Directives trong Vue.js được sử dụng như một <code>attribute</code> trong thẻ của HTML, cung cấp những chức năng:</p>\n<ul>\n<li>Hiển thị (view) như <code>v-text</code>, <code>v-html</code>, <code>v-pre</code>, <code>v-bind</code></li>\n<li>Input như <code>v-model</code></li>\n<li>Các sự kiện (event binding) như <code>v-on</code></li>\n<li>Điều khiển (conditionals) như <code>v-show</code>, <code>v-if</code>, <code>v-else</code>, <code>v-else-if</code></li>\n<li>Lặp lại (loop rendering) như <code>v-for</code></li>\n</ul>\n<p><iframe src="https://codesandbox.io/embed/vue-rendering-for-loop-u975c?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>2. Components</h4>\n<p>Component là một tính năng rất hay và phổ biến hiện nay trong các thư viện được viết bằng JavaScript. Với việc sử dụng Component trong Vue.js bạn có thể tự mình xây dựng những Component như <code>modal</code>, <code>calendar</code>, <code>datepicker</code>, <code>slider</code>, <code>charts</code>...và tái sử dụng lại trong ứng dụng hoặc sử dụng vào bất kỳ nơi nào bạn muốn.</p>\n<p>Component trong Vue.js có hai cách đăng ký cơ bản</p>\n<ul>\n<li>\n<p>Đăng ký toàn cục, sử dụng trong toàn bộ ứng dụng (Global Registration)</p>\n<pre class="hljs"><code>Vue.component(<span class="hljs-string">\'component-name\'</span>, {\n  <span class="hljs-comment">// ... options ...</span>\n});\n</code></pre>\n</li>\n<li>\n<p>Đăng ký cục bộ, sử dụng trong component được chỉ định (Local Registration). Ví dụ ở đây <code>BookComponent</code> chỉ được sử dụng trong <code>ArticleComponent</code> khi được đăng ký.</p>\n<pre class="hljs"><code><span class="hljs-keyword">var</span> BookComponent = { <span class="hljs-comment">/* ... */</span> };\n<span class="hljs-keyword">var</span> ArticleComponent = {\n  <span class="hljs-attr">components</span>: {\n    <span class="hljs-string">\'book\'</span>: BookComponent\n  }\n};\n\n<span class="hljs-keyword">new</span> Vue({\n  <span class="hljs-attr">el</span>: <span class="hljs-string">\'#app\'</span>\n  <span class="hljs-attr">components</span>: {\n    <span class="hljs-string">\'article\'</span>: ArticleComponent\n  }\n});\n</code></pre>\n</li>\n</ul>\n<p><iframe src="https://codesandbox.io/embed/vue-fetch-books-from-google-clhrf?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>3. Transitions và Animations</h4>\n<p>Transitions và Animations là một phần hầu như không thể thiếu trong thiết kế UI và UX.</p>\n<p>Transitions và Animations trong Vue.js khá linh hoạt. Bạn có thể sử dụng các thuộc tính của CSS transitions và animations hoặc các thư viện CSS animations như <a href="https://daneden.github.io/animate.css/">Animate.css</a> hoặc thư viện JavaScript như <a href="http://animejs.com/">anime.js</a> hay <a href="https://popmotion.io/">popmotion</a> để tạo các hiệu ứng đẹp mắt.</p>\n<p>Bạn có thể tạo <code>Transitions</code> cho một phần tử</p>\n<pre class="hljs"><code>&lt;transition name=<span class="hljs-string">"slide"</span>&gt;\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"show"</span>&gt;</span>Show Slide<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>\n&lt;/transition&gt;\n</code></pre>\n<p>hoặc một nhóm (danh sách) phần tử</p>\n<pre class="hljs"><code>&lt;transition-group name=<span class="hljs-string">"items"</span> tag=<span class="hljs-string">"section"</span>&gt;\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in items"</span> <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">"item.id"</span>&gt;</span>\n    {{ item.name }}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n&lt;/transition-group&gt;\n</code></pre>\n<p><iframe src="https://codesandbox.io/embed/vue-transition-o3l93?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h3>Túm lại</h3>\n<p>Vue.js là một thư viện khá tốt để các bạn đã có sẵn nền tảng về lập trình HTML, CSS và JavaScript có thể bắt đầu.</p>\n'}},182:function(n,t){n.exports={attributes:{title:"Blog và tôi",slug:"blog-va-toi",date:"2013-07-20",tags:["personal"]},html:'<p>Đầu tiên mình cám ơn các bạn đã ghé thăm blog này. Cũng đã làm quen với blog từ lâu, từ Wordpress, Tumblr rồi Posterous. Nhưng thực sự đến hôm nay mình mới có thể bắt đầu với việc viết blog.</p>\n<p>Blog hiện tại mình xây dựng bằng <a href="http://jekyllrb.com">Jekyll</a> (một dạng blog tĩnh được viết bằng Ruby). Trước khi dùng quyết định Jekyll mình đã có một thời gian tìm hiểu và sử dụng <a href="http://octopress.org/">Octopress</a> (một blogging framework cho Jekyll hỗ trợ rất nhiều như highlight code, responsive layout...). Bạn đã từng nghe tới Jekyll chưa? Nếu bạn chưa từng nghe qua thì mình xin giới thiệu một chút về Jekyll.</p>\n<h3>Jekyll là gì?</h3>\n<p>Jekyll là một nền tảng xây dựng blog. Nhưng Jekyll chỉ là dạng tĩnh, không có cơ sở dữ liệu hay ngôn ngữ phía server như PHP, Ruby, Python...mà chỉ đơn thuần là các trang nội dung. Bạn chỉ cần biết về HTML, CSS là có thể xây dựng được blog này.</p>\n<h3>Tại sao mình thích Jekyll?</h3>\n<p>Mặc dù hiện này có rất nền tảng xây dựng blog tốt như Blogger, Wordpress, Typepad...Nhưng mình rất thích Jekyll vì các lý do sau:</p>\n<ul>\n<li>Với ít kiến thức HTML, CSS mình có thể code tự do như giao diện...cũng như các chức năng tương tác phải sử dụng JavaScript.</li>\n<li>Chỉ cần một editor đơn giản như Notepad++ hay Sublime Text 2 mình có thể chỉnh sửa và cập nhật bài viết. Bằng cách ghi chép mọi thứ bằng Markdown.</li>\n<li>Được học rất nhiều điều thú vị mới như Ruby, Sass/Compass và đặc biệt là Git và JavaScript.</li>\n</ul>\n<h3>Giao diện đầu tiên</h3>\n<p><img src="/images/blog/blog_v1.png" alt="Dang Thanh Blog - phiên bản đầu tiên"></p>\n<p>Mình xây dựng giao diện dựa trên khái niệm <a href="http://alistapart.com/article/responsive-web-design">Responsive Web Design</a>. Giao diện hiện tại chỉ chạy tốt trên desktop lẫn máy tính bảng. Còn một số lỗi khi hiển thị highlight code trên thiết bị di động (nên mình chưa thực hiện cho phiên bản di động nhưng mình sẽ cập nhật sau)</p>\n<p>Mình hy vọng sau này các bạn sẽ tiếp tục ủng hộ các bài viết từ blog này và cũng mong nhận được nhiều sự góp ý để mình có thể xây dựng blog hoàn thiện hơn. Mình xin cám ơn.</p>\n'}},183:function(n,t){n.exports={attributes:{title:"Checkboxes jQuery Plugin",slug:"checkboxes-jquery-plugin",date:"2013-08-28",tags:["javascript"]},html:'<p><a href="http://jquery.com/">jQuery</a> là một thư viện tuyệt vời của JavaScript. Các jQuery plugin giúp bạn làm việc linh hoạt hơn và hiệu quả hơn. Hôm nay mình giới thiệu với các bạn một plugin mình tự viết là Checkboxes. Đây là jQuery Plugin hỗ trợ việc chọn và không chọn cho nhiều checkbox.</p>\n<h3>Checkboxes jQuery Plugin</h3>\n<pre class="hljs"><code>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>) </span>{\n\n  <span class="hljs-string">\'use strict\'</span>;\n\n  $.fn.extend({\n    <span class="hljs-attr">checkboxes</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>) </span>{\n      <span class="hljs-comment">// Tham số mặc định.</span>\n      <span class="hljs-keyword">var</span> defaults = {\n        <span class="hljs-attr">itemChild</span>: <span class="hljs-string">\'\'</span>\n      };\n\n      <span class="hljs-keyword">var</span> option = $.extend(defaults, options);\n\n      <span class="hljs-comment">// Hàm kiểm tra chọn hoặc không chọn cho các phần tử con.</span>\n      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkedValue</span>(<span class="hljs-params">element, bool</span>) </span>{\n        <span class="hljs-keyword">if</span> (bool) {\n          <span class="hljs-keyword">return</span> element.each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            $(<span class="hljs-keyword">this</span>).prop(<span class="hljs-string">\'checked\'</span>, <span class="hljs-literal">true</span>);\n          });\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-keyword">return</span> element.each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            $(<span class="hljs-keyword">this</span>).prop(<span class="hljs-string">\'checked\'</span>, <span class="hljs-literal">false</span>);\n          });\n        }\n      }\n\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">var</span> obj = option,\n            $itemAll = $(<span class="hljs-keyword">this</span>),\n            $itemChild = $(<span class="hljs-string">\'input[name^="\'</span> + obj.itemChild + <span class="hljs-string">\'"]\'</span>);\n\n        <span class="hljs-comment">// Chọn tất cả trước khi trang khởi tạo</span>\n        <span class="hljs-keyword">if</span> ($itemAll.is(<span class="hljs-string">\':checked\'</span>)) {\n          checkedValue($itemChild, <span class="hljs-literal">true</span>);\n        }\n\n        <span class="hljs-comment">// Đánh đấu chọn hoặc không chọn khi phần từ cha chọn hoặc không chọn.</span>\n        $itemAll.change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n          <span class="hljs-keyword">var</span> $self = $(<span class="hljs-keyword">this</span>);\n\n          <span class="hljs-keyword">if</span> ($self.is(<span class="hljs-string">\':checked\'</span>)) {\n            checkedValue($itemChild, <span class="hljs-literal">true</span>);\n          } <span class="hljs-keyword">else</span> {\n            checkedValue($itemChild, <span class="hljs-literal">false</span>);\n          }\n        });\n\n        <span class="hljs-comment">// Đánh dấu chọn phần tử cha khi tất cả phần tử con được đánh dấu.</span>\n        $itemChild.change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n          <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;\n\n          <span class="hljs-keyword">if</span> (!$itemChild.is(<span class="hljs-string">\':checked\'</span>)) {\n            $itemAll.prop(<span class="hljs-string">\'checked\'</span>, <span class="hljs-literal">false</span>);\n          }\n\n          $itemChild.each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            <span class="hljs-keyword">var</span> $self = $(<span class="hljs-keyword">this</span>);\n            <span class="hljs-keyword">if</span> (!$self.is(<span class="hljs-string">\':checked\'</span>)) {\n              flag = <span class="hljs-literal">false</span>;\n              <span class="hljs-keyword">return</span>;\n            }\n          });\n\n          $itemAll.prop(<span class="hljs-string">\'checked\'</span>, flag);\n        });\n\n      });\n    }\n  });\n})(jQuery);\n</code></pre>\n<h3>Sử dụng Checkboxes jQuery Plugin</h3>\n<h4>Cú pháp HTML</h4>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"selectAll"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Select All<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk01"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk01"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 01<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk02"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk02"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 02<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk03"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk03"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 03<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk04"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk04"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 04<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk05"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk05"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 05<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk06"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk06"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 06<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk07"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk07"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 07<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk08"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk08"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 08<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk09"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk09"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 09<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk10"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"chk10"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 10<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n</code></pre>\n<h4>Sử dụng</h4>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"checkboxes.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  $(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n      $(<span class="hljs-string">\'.selectAll\'</span>).checkboxes({\n          <span class="hljs-attr">itemChild</span>: <span class="hljs-string">\'chk\'</span> <span class="hljs-comment">// tên của các checkbox con</span>\n      });\n  });\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre>\n<p><iframe src="https://codesandbox.io/embed/checkboxes-jquery-plugin-lxx0m?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<p>Bạn cũng có thể tải Checkboxes jQuery Plugin tại <a href="https://github.com/dangvanthanh/jquery.checkboxes">Github</a>.</p>\n<p>Đây là jQuery Plugin đầu tiên do mình viết nên cũng có thể không được tốt lắm. Mong các bạn góp ý thêm.</p>\n'}},184:function(n,t){n.exports={attributes:{title:"Classes Javascript và Vue.js",slug:"classes-javascript-va-vue",date:"2019-03-16T15:31:48.000Z",tags:["javascript","vue"]},html:'<p>Trước tôi đã giới thiệu cho các bạn về <a href="/blog/bat-dau-voi-vue/#2-components">Component trong Vue.js</a>. Bây giờ chúng ta thử tạo một component để tạo một <em>User</em> như sau:</p>\n<pre class="hljs"><code>&lt;template&gt;\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.firstName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.lastName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.hobby"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"fullName"</span>&gt;</span>{{ fullName }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"handlerAddNewUser"</span>&gt;</span>Add New User<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">import</span> UserService <span class="hljs-keyword">from</span> <span class="hljs-string">\'@services/user\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">\'Comment\'</span>,\n  data() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">user</span>: {\n        <span class="hljs-attr">fistName</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">lastName</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">hobby</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">created</span>: <span class="hljs-number">0</span>\n      }\n    }\n  },\n  <span class="hljs-attr">computed</span>: {\n    fullName() {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>.firstName}</span> <span class="hljs-subst">${<span class="hljs-keyword">this</span>.lastName}</span>`</span>\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> handlerAddNewUser() {\n      <span class="hljs-keyword">await</span> UserService.post(<span class="hljs-string">\'/add\'</span>, {\n        <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">this</span>.user.firstName,\n        <span class="hljs-attr">lastName</span>: <span class="hljs-keyword">this</span>.user.lastName,\n        <span class="hljs-attr">hobby</span>: <span class="hljs-keyword">this</span>.user.hobby,\n        <span class="hljs-attr">created</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()\n      });\n  \n      <span class="hljs-comment">// Reset form</span>\n      <span class="hljs-keyword">this</span>.user.firstName = <span class="hljs-string">\'\'</span>;\n      <span class="hljs-keyword">this</span>.user.lastName = <span class="hljs-string">\'\'</span>;\n      <span class="hljs-keyword">this</span>.user.hobby = <span class="hljs-string">\'\'</span>;\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>\n</code></pre>\n<p>Component viết kiểu này chúng ta rất hay thường dùng. Code trên vẫn chạy ổn.</p>\n<p>Vấn đề ở đây chũng ta sẽ gặp phải là:</p>\n<ul>\n<li>Component càng ngày càng phát triển, và có thể sẽ có thêm nhiều thuộc tính Comment nữa</li>\n<li>Ở đây chúng ta lặp đi lặp lại <code>this.user</code> và có thể dẫn đến một số lỗi không mong muốn như dễ dàng bỏ qua một vài thuộc tính khi có nhiều đoạn code hơn.</li>\n<li>Không thể tái sử dụng những hàm logic cho các component khác.</li>\n</ul>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">Classes JavaScript</a> là một tính năng được giới thiệu trong ECMAScript 2015 (hay thường gọi là ES6). Và ở đây tôi sử dụng Classess của ES6 để khắc phục những vấn đề trên và sử dụng chung với Vue.js</p>\n<p>Đầu tiên tôi sẽ khởi tạo một classes như sau:</p>\n<pre class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>() </span>{\n  <span class="hljs-keyword">constructor</span>(user = {}) {\n    <span class="hljs-keyword">this</span>.firstName = user.firstName ? user.firstName : <span class="hljs-string">\'\'</span>;\n    <span class="hljs-keyword">this</span>.lastName = user.lastName ? user.lastName : <span class="hljs-string">\'\'</span>;\n    <span class="hljs-keyword">this</span>.hobby = user.hobby ? user.hobby : <span class="hljs-string">\'\'</span>;\n    <span class="hljs-keyword">this</span>.created = <span class="hljs-number">0</span>;\n  }\n\n  <span class="hljs-keyword">get</span> <span class="hljs-title">fullName</span>() {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>.firstName}</span> <span class="hljs-subst">${<span class="hljs-keyword">this</span>.lastName}</span>`</span>\n  }\n\n  createPayload() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">this</span>.firstName,\n      <span class="hljs-attr">lastName</span>: <span class="hljs-keyword">this</span>.lastName,\n      <span class="hljs-attr">hobby</span>: <span class="hljs-keyword">this</span>.hobby,\n      <span class="hljs-attr">created</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()\n    }\n  }\n}\n</code></pre>\n<p>Giờ ta sẽ trở lại với Component ở trên</p>\n<pre class="hljs"><code>&lt;template&gt;\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.firstName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.lastName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.hobby"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"user.name"</span>&gt;</span>{{ user.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"handlerAddNewUser"</span>&gt;</span>Add New User<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">import</span> UserService <span class="hljs-keyword">from</span> <span class="hljs-string">\'@/services/user\'</span>;\n<span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">\'@/constructor/user\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">\'Comment\'</span>,\n  data() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">user</span>: <span class="hljs-keyword">new</span> User()\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> handlerAddNewUser() {\n      <span class="hljs-keyword">await</span> UserService.post(<span class="hljs-string">\'/add\'</span>, <span class="hljs-keyword">this</span>.user.createPayload());\n  \n      <span class="hljs-comment">// Reset form</span>\n      <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>.user, <span class="hljs-keyword">new</span> User())\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>\n</code></pre>\n<p>Ở đây ta thấy rằng:</p>\n<ul>\n<li>Việc quản lý lỗi không mong muốn cho từng thuộc tính của User sẽ đơn giản hơn</li>\n<li>Các thuộc tính <code>computed</code> sử dụng Component của Vue.js sẽ tự động có sẵn trong khởi tạo của User</li>\n<li>Việc quản lý logic ở một nơi sẽ giúp bạn dễ dàng kiểm soát và tái sử dụng</li>\n</ul>\n<h3>Ý kiến chuyên gia</h3>\n<p>Theo một số ý kiến chuyên gia thì <a href="https://twitter.com/_ericelliott/status/573090480004591617">không nên sử dụng ES6 Classes</a>. Nhưng theo tôi trong trường hợp này việc sử dụng Classes trong Vue.js giúp cải thiện khả năng quản lý lỗi cũng như logic được tốt hơn.</p>\n'}},185:function(n,t){n.exports={attributes:{title:"CSS Triangles Mixin trong Sass",slug:"css-triangles-mixin-trong-sass",date:"2013-08-20",tags:["css","sass"]},html:'<p>Trong thiết kế web các hình khối như hình tam giác, hình tròn, hình chữ nhật...thường được sử dụng khá thường xuyên. Khi muốn tạo các chú thích (tooltips), trước đây bạn thường sử dụng hình ảnh bằng việc sử dụng các công cụ như Photoshop, Fireworsk...điều này có thể làm cho bạn phải vất vả thay đổi khi muốn thiết kế lại vị trí của chúng, nhưng với CSS Triangles bạn cũng có thể tạo cho mình những chú thích linh động hơn.</p>\n<p>Bài viết trước mình cũng đã giới thiệu <strong><a href="/blog/su-dung-sass">sử dụng Sass</a></strong> đến với các bạn. Hôm nay mình sẽ hướng dẫn các bạn viết CSS Triangles sử dụng Sass.</p>\n<p>Để bạn có thể dễ dàng làm quen với mixin này. Đầu tiên mình sẽ hướng dẫn các bạn sử dụng điều khiển kiểm soát <strong>@if</strong></p>\n<blockquote>\n<p><strong>@if</strong> là một điều khiển của SassScript và được sử dụng dưới dạng lồng ghép nếu biểu thức trả về giá trị nào đó hoặc false hoặc null</p>\n</blockquote>\n<pre class="hljs"><code><span class="hljs-variable">$type</span>: blue\n\np\n\t@if <span class="hljs-variable">$type</span> == red\n\t\tcolor: red\n\t@else if <span class="hljs-variable">$type</span> == green\n\t\tcolor: green\n\t@else if <span class="hljs-variable">$type</span> == blue\n\t\tcolor: blue\n\t@else\n\t\tcolor: white\n</code></pre>\n<p>Khi chuyển đổi thành CSS ta được</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">p</span> {\n  <span class="hljs-attribute">color</span>: blue;\n}\n</code></pre>\n<p>Và sử dụng điều hướng <strong>if</strong> ta có thể viết CSS Triangles sử dụng Sass</p>\n<h3>CSS Triangles Mixin trong Sass</h3>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Dấu = bạn có thể thay thế bằng @mixin\n * nếu bạn sử dụng cú pháp SCSS\n */</span>\n=arrow(<span class="hljs-variable">$direction</span>, <span class="hljs-variable">$color</span>, <span class="hljs-variable">$size</span>)\n  <span class="hljs-variable">$transparent</span>: <span class="hljs-variable">$size</span> solid transparent\n  <span class="hljs-variable">$sizeborder</span>: <span class="hljs-variable">$size</span> solid <span class="hljs-variable">$color</span> // Khai báo này sẽ giúp bạn tránh lặp lại code\n  display: block\n  height: <span class="hljs-number">0</span>\n  width: <span class="hljs-number">0</span>\n\n  // Mũi tên theo hướng lên trên\n  @if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"top"</span>\n    border:\n      left: <span class="hljs-variable">$transparent</span>\n      right: <span class="hljs-variable">$transparent</span>\n      bottom: <span class="hljs-variable">$sizeborder</span>\n  // Mũi tên theo hướng bên phải\n  @else if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"right"</span>\n    border:\n      top: <span class="hljs-variable">$transparent</span>\n      bottom: <span class="hljs-variable">$transparent</span>\n      left: <span class="hljs-variable">$sizeborder</span>\n  // Mũi tên theo hướng bên dưới\n  @else if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"bottom"</span>\n    border:\n      top: <span class="hljs-variable">$sizeborder</span>\n      right: <span class="hljs-variable">$transparent</span>\n      left: <span class="hljs-variable">$transparent</span>\n  // Mũi tên theo hướng bên trái\n  @else if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"left"</span>\n    border:\n      top: <span class="hljs-variable">$transparent</span>\n      right: <span class="hljs-variable">$sizeborder</span>\n      bottom: <span class="hljs-variable">$transparent</span>\n  // Mũi tên theo hướng trên bên phải\n  @else if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"top-right"</span>\n    border:\n      top: <span class="hljs-variable">$sizeborder</span>\n      right: <span class="hljs-variable">$transparent</span>\n  // Mũi tên theo hướng trên bên trái\n  @else if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"top-left"</span>\n    border:\n      top: <span class="hljs-variable">$sizeborder</span>\n      left: <span class="hljs-variable">$transparent</span>\n  // Mũi tên theo hướng dưới bên phải\n  @else if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"bottom-right"</span>\n    border:\n      bottom: <span class="hljs-variable">$sizeborder</span>\n      right: <span class="hljs-variable">$transparent</span>\n  // Mũi tên theo hướng dưới bên trái\n  @else if <span class="hljs-variable">$direction</span> == <span class="hljs-string">"bottom-left"</span>\n    border:\n      bottom: <span class="hljs-variable">$sizeborder</span>\n      left: <span class="hljs-variable">$transparent</span>\n</code></pre>\n<h3>Sử dụng CSS Triangles Mixin</h3>\n<p>Việc sử dụng CSS Triangles mixin cực kì đơn giản.</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Dấu + bạn có thể thay thế bằng @include\n * nếu bạn sử dụng cú pháp SCSS\n */</span>\n<span class="hljs-selector-class">.arrow-top</span>\n  +arrow(<span class="hljs-attribute">top</span>, rgba(255, 10, 10, <span class="hljs-selector-class">.5</span>), 50px)\n\n<span class="hljs-selector-class">.arrow-right</span>\n  +arrow(<span class="hljs-attribute">right</span>, rgba(255, 10, 10, <span class="hljs-selector-class">.5</span>), 50px)\n</code></pre>\n<p><iframe src="https://codesandbox.io/embed/sass-css-triangles-69fzm?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>Sử dụng với CSS3 Pseudo :before hoặc :after để tạo tooltips</h4>\n<pre class="hljs"><code><span class="hljs-selector-class">.tooltip</span>\n  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e74c3c</span>\n  display: inline-block\n  width: <span class="hljs-number">500px</span>\n  padding: <span class="hljs-number">20px</span>\n  position: relative\n\n  &amp;:before\n    content: <span class="hljs-string">""</span>\n    position: absolute\n    top: <span class="hljs-number">30px</span>\n    left: -<span class="hljs-number">20px</span>\n    +arrow(left, <span class="hljs-number">#e74c3c</span>, <span class="hljs-number">20px</span>) // Bạn có thể chọn vị trí khác cho phù hợp\n</code></pre>\n<p><iframe src="https://codesandbox.io/embed/sass-tooltips-using-css-triangles-mixin-xnky4?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<p>Với mixin này, mình hi vọng các bạn có thể cải tiến thêm các tooltips của website mình và khám phá thêm nhiều kĩ thuật mới qua việc sử dụng các điều khiển các Sass.</p>\n'}},186:function(n,t){n.exports={attributes:{title:"Đổ Bóng Mixin Với Text-Shadow",slug:"do-bong-mixin-voi-text-shadow",date:"2013-09-03",tags:["css","sass","javascript"]},html:'<p>CSS3 Text-Shadow là tính năng giúp bạn dễ dàng tạo đổ bóng cho text. Với text-shadow bạn cũng có thể dễ dàng tạo ra các kiểu chữ nghệ thuật (typography) hay kiểu chữ 3D...Và hôm nay mình sẽ giới thiệu các bạn <strong><a href="/blog/css-triangles-mixin-su-dung-sass/">cách tạo mixin</a></strong> đổ bóng dài (long shadow) trong Sass.</p>\n<h3>Đổ bóng dài (Long Shadow) mixin trong Sass</h3>\n<pre class="hljs"><code>/**\n * Long Shadow Mixin\n */\n@mixin longshadow($color, $size, $direction)\n\t$ts: null\n\n\t@for $i from 1 through $size\n\t\t// Đổ bóng hướng lên trên\n\t\t@if $direction == &quot;top&quot;\n\t\t\t$ts: 0 #{$i * -1}px 0 $color, $ts\n\t\t// Đổ bóng hướng sang phải\n\t\t@else if $direction == &quot;right&quot;\n\t\t\t$ts: #{$i}px 0 0 $color, $ts\n\t\t// Đổ bóng hướng xuống dưới\n\t\t@else if $direction == &quot;bottom&quot;\n\t\t\t$ts: 0 #{$i}px 0 $color, $ts\n\t\t// Đổ bóng hướng sang trái\n\t\t@else if $direction == &quot;left&quot;\n\t\t\t$ts: #{$i * -1}px 0 0 $color, $ts\n\t\t// Đổ bóng hướng lên trên bên trái\n\t\t@else if $direction == &quot;top-left&quot;\n\t\t\t$ts: #{$i * -1}px #{$i * -1}px 0 $color, $ts\n\t\t// Đổ bóng hướng lên trên bên phải\n\t\t@else if $direction == &quot;top-right&quot;\n\t\t\t$ts: #{$i}px #{$i * -1}px 0 $color, $ts\n\t\t// Đổ bóng hướng xuống dưới bên trái\n\t\t@else if $direction == &quot;bottom-left&quot;\n\t\t\t$ts: #{$i * -1}px #{$i}px 0 $color, $ts\n\t\t// Đổ bóng hướng xuống dưới bên phải\n\t\t@else if $direction == &quot;bottom-right&quot;\n\t\t\t$ts: #{$i}px #{$i}px 0 $color, $ts\n\ttext-shadow: $ts\n</code></pre>\n<h3>Sử dụng</h3>\n<p>Sau khi tạo được mixin thì ta có thể sử dụng rất dễ dàng tùy theo màu sắc, độ lớn và vị trí bóng mà bạn muốn hiển thị.</p>\n<pre class="hljs"><code>.element--one\n\t+longshadow(#e96b5e, 20, top)\n.element--two\n\t+longshadow(#a13c32, 10, right)\n.element--three\n\t+longshadow(#fbbc85, 30, bottom)\n.element--four\n\t+longshadow(#af7a4b, 40, left)\n.element--five\n\t+longshadow(#6dd7b5, 70, top-left)\n.element--six\n\t+longshadow(#3e9277, 90, top-right)\n.element--seven\n\t+longshadow(#8787c4, 60, bottom-left)\n.element--eight\n\t+longshadow(#525283, 50, bottom-right)\n</code></pre>\n<p><iframe src="https://codesandbox.io/embed/sass-long-shadow-mixin-60zj3?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<p>Trên đây mình <strong><a href="/blog/su-dung-sass/">sử dụng Sass</a></strong> để tạo đổ bóng dài, bạn cũng có thể tùy biến thêm như thêm chức năng bóng mờ cho bóng...Nếu bạn không muốn làm việc với Sass nhưng vẫn muốn dùng tạo text đổ bóng dài bạn có thể sử dụng <strong><a href="/labs/longshadow-jquery-plugin/">Long Shadow jQuery Plugin</a></strong> mình đang viết và phát triển. Mình cũng rất mong nhận được góp ý của các bạn để hoàn thiện hơn mixin cũng như jQuery plugin này.</p>\n'}},187:function(n,t){n.exports={attributes:{title:"Functional CSS",slug:"functional-css",date:"2018-11-06T14:03:27.000Z",tags:["css","postcss","tailwindcss"]},html:'<p>Khi viết CSS cho web. Có rất nhiều CSS Framework để bạn lựa chọn. Và một số CSS Framework sau đây thì rất phổ biến:</p>\n<ul>\n<li><a href="http://getbootstrap.com/">Bootstrap</a></li>\n<li><a href="https://foundation.zurb.com/">Foundation</a></li>\n<li><a href="https://bulma.io/">Bulma</a></li>\n<li><a href="https://semantic-ui.com/">Sematic UI</a></li>\n<li><a href="https://xn--getikit-v0a.com/">UI Kit</a></li>\n</ul>\n<p>Những CSS Framework trên giúp bạn xây dựng Prototype, Responsive Design một cách linh hoạt và dễ dàng.</p>\n<p>Hôm nay tôi sẽ giới thiệu thêm với các bạn về Functional CSS (được thường được gọi là <code>Utility-first CSS</code> hay <code>Atomic CSS</code>)</p>\n<h3>Vậy Functional CSS là gì?</h3>\n<p>Về cơ bản, <strong>Functional CSS</strong> là tập hợp hàng ngàn <code>classes</code> nhỏ định nghĩa cho từng chức năng, thuộc tính, quy tắc của CSS.</p>\n<p>Ví dụ:</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"component"</span>&gt;</span>\n...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">\n<span class="hljs-selector-class">.component</span> {\n  <span class="hljs-attribute">background</span>: <span class="hljs-number">#333</span>;\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;\n  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#555</span>;\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre>\n<p>Với Functional CSS ta viết như sau:</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-grey m-20 p-10 text-white border border-solid border-grey-dark"</span>&gt;</span>\n...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">\n<span class="hljs-selector-class">.bg-grey</span> { <span class="hljs-attribute">background</span>: <span class="hljs-number">#333</span> };\n<span class="hljs-selector-class">.m-20</span> { <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>; }\n<span class="hljs-selector-class">.p-10</span> { <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; }\n<span class="hljs-selector-class">.text-white</span> { <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>; }\n<span class="hljs-selector-class">.border</span> { <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span>; }\n<span class="hljs-selector-class">.border-solid</span> { <span class="hljs-attribute">border-style</span>: solid; }\n<span class="hljs-selector-class">.border-grey-dark</span> { <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#555</span>; }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre>\n<p>Vậy hoá ra nó cũng giống với <strong>Inline Style</strong> mà thỉnh thoảng trước đây ta cũng hay dùng nhỉ?</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"background: #333; margin: 20px; padding: 10px; color: #fff; border: 1px solid #555;"</span>&gt;</span>\n...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<h3>Sự khác nhau giữa Functional CSS và Inline Style</h3>\n<p>Nhìn vào ví dụ trên bạn có thể nghĩ là cách viết Functional CSS và Inline Style có vẻ giống nhau. Nhưng Functional CSS rất khác với Inline Style về những điểm sau:</p>\n<ol>\n<li>\n<p>Functional CSS là những <code>classes</code> được định nghĩa trước. Và các <code>classes</code> này được nhất quán với từng <code>classes</code> bạn định nghĩa như về phông chữ, màu sắc, khoảng cách (margin hoặc padding) nên bạn sẽ dễ dàng sử dụng lại so với kiểu dùng Inline Style</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-blue text-sm"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>so với</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"background: blue; font-size: 10px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>Functional CSS hỗ trợ <strong>media queries</strong>. Giúp bạn có thể xây dựng Responsive Design.</p>\n</li>\n<li>\n<p>Functional CSS có thể sử dụng để hỗ trợ cho từng kiểu in cụ thể bạn muốn với CSS.</p>\n</li>\n<li>\n<p>Với <strong>Pseudo-classes CSS</strong> như <code>::before</code>, <code>::after</code> hay <code>:hover</code>. Functional dễ dàng giúp bạn định nghĩa còn Inline Style thì không thể.</p>\n</li>\n</ol>\n<h3>Lợi ích khi dùng Functional CSS</h3>\n<p>tôi cũng thường hay sử dụng Bootstrap để xây dựng web. Nhưng từ sau khi chuyển sang dùng Functional CSS tôi thấy có những lợi ích sau:</p>\n<ul>\n<li>Thời gian xây dựng web của tôi nhanh hơn. Tăng lên khoảng 1.5 hoặc 2 lần so với trước.</li>\n<li>Không còn lo lắng về việc sử dụng <code>Naming CSS</code> nữa.</li>\n<li>Dễ dàng bảo trì và phát triển CSS.</li>\n<li>Tránh được việc lặp đi lặp lại code, tăng <code>performance</code> lên.</li>\n<li>Dễ dàng xây dựng hầu hết các <code>Component UI</code> mà không cần viết thêm nhiều CSS.</li>\n<li>Bằng việc mô tả cách sử dụng Functional CSS thì các bạn Developer cả <code>Backend</code> lẫn <code>Frontend</code> cũng dễ dàng chỉnh sửa.</li>\n</ul>\n<h3>Sử dụng thư viện Functional CSS nào?</h3>\n<p>Nếu bạn không có thời gian để xây dựng các <code>Utility-first CSS</code> thì bạn có thể tham khảo và sử dụng những thư viện tôi đề cập dưới đây:</p>\n<ul>\n<li><a href="http://basscss.com/">Basscss</a> - thư viện đầu tiên Functional CSS mà tôi sử dụng.</li>\n<li><a href="http://tachyons.io/">Tachyons</a> - đây là thư viện tôi sử dụng để làm giao diện blog này phiên bản trước đây.</li>\n<li><a href="https://tailwindcss.com/">TailwindCSS</a> - thư tiện tôi thích nhất và thường sử dụng cho đến bây giờ.</li>\n<li><a href="https://github.com/mrmrs/colors">Colors.css</a> - sử dụng màu sắc cho web.</li>\n</ul>\n<h3>Vậy Functional CSS không có nhược điểm?</h3>\n<p>Bất kỳ thư viện nào đều có những ưu và nhược điểm. Nhưng thường tôi chỉ nêu lên ưu điểm thôi. Còn nhược điểm có lẽ là tôi để các bạn tự dùng và trải nghiệm nhé. Bởi vì có thể tôi thích cái X còn bạn thì lại thích cái Y. Nên tôi nghĩ rằng bạn nên thử sử dụng chúng và xem thư viện nào phù hợp với mình nhé.</p>\n<h3>Tailwind CSS</h3>\n<p>Như đã nói trên, <strong>Tailwind CSS</strong> là thư viện mà tôi rất thích. Nên tôi sẽ giới thiệu bạn một số ví dụ tôi sử dụng nó để xây dựng UI nhé.</p>\n<h4>Login</h4>\n<p><iframe src="https://codesandbox.io/embed/tailwindcss-login-7when?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>Card</h4>\n<p><iframe src="https://codesandbox.io/embed/tailwindcss-card-cu3uk?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>Navigation</h4>\n<p><iframe src="https://codesandbox.io/embed/tailwindcss-navigation-grmwm?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>Table</h4>\n<p><iframe src="https://codesandbox.io/embed/tailwindcss-table-xhsqi?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>Plan</h4>\n<p><iframe src="https://codesandbox.io/embed/tailwindcss-plan-qu9hf?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n'}},188:function(n,t){n.exports={attributes:{title:"Giới Thiệu CSS3 Transform",slug:"gioi-thieu-css3-transform",date:"2013-09-01",tags:["css"],cover:"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/blooming_jtv6.svg"},html:'<p>CSS3 transform là một trong những chức năng mạnh mẽ mà CSS3 cung cấp. Nó cho phép tác động đến tất cả các phần tử của HTML mà không ảnh hưởng đến cách xây dựng layout cho trang web như xoay phần tử, di chuyển các phần tử sang trái, phải, lên xuống, nghiêng hay phóng to hoặc thu nhỏ phần tử.</p>\n<p>CSS3 transform cung cấp cả 2D CSS transform và 3D CSS transform.</p>\n<h3>Cú pháp</h3>\n<pre class="hljs"><code><span class="hljs-selector-class">.element</span> {\n\t<span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">method</span>(value); // Chrome, Safari, Opera\n\t<span class="hljs-attribute">-moz-transform</span>: <span class="hljs-built_in">method</span>(value); // Firefox\n\t<span class="hljs-attribute">-ms-transform</span>: <span class="hljs-built_in">method</span>(value); // Internet Explorer 9+\n\t<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">method</span>(value);\n}\n</code></pre>\n<p>Các phương thức trên bạn có thể thay thế bằng một trong các phương thức sau:</p>\n<ul>\n<li>translate()</li>\n<li>scale()</li>\n<li>rotate()</li>\n<li>skew()</li>\n</ul>\n<h3>2D CSS Transform</h3>\n<h4>1. Translate</h4>\n<pre class="hljs"><code><span class="hljs-selector-class">.element</span> {\n\t<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50px</span>, <span class="hljs-number">50px</span>);\n}\n</code></pre>\n<p>Translate là phương thức cho phép bạn có thể di chuyển phần tử sang các hướng trái phải, trên dưới. Phương thức này bao gồm hai giá trị <strong>X</strong> và <strong>Y</strong>. Giá trị <strong>X</strong> cho phép phần tử di chuyển theo hướng ngang (trái phải) và giá trị <strong>Y</strong> cho phép phần tử di chuyển theo hướng dọc (trên dưới). Bên cạnh phương thức translate() thì translate còn hai phương thức khác là:</p>\n<ul>\n<li>translateX()</li>\n<li>translateY()</li>\n</ul>\n<p><iframe src="https://codesandbox.io/embed/css3-transform-translate-nczmz?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>2. Scale</h4>\n<pre class="hljs"><code><span class="hljs-selector-class">.element</span> {\n\t<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>);\n}\n</code></pre>\n<p>Scale là phương thức cho phép bạn có thể phóng to hoặc thu nhỏ phần tử so với kích thước thật của phần tử. Kích thước thật được phương thức scale() mặc định là 1. Vì thế bạn muốn phóng to thì có thể khai báo giá trị &gt; 1 và thu nhỏ thì khai báo giá trị &lt; 1. Đặc biệt khi bạn khai báo <strong>scale(0)</strong> thì phần tử sẽ biến mất nên bạn cần chú ý khi sử dụng phương thức này.</p>\n<p><iframe src="https://codesandbox.io/embed/css3-transform-scale-ce9wb?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>3. Rotate</h4>\n<pre class="hljs"><code><span class="hljs-selector-class">.element</span> {\n\t<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>);\n}\n</code></pre>\n<p>Rotate là phương thức cho phép bạn xoay phần tử và giá trị được ghi bằng độ (degrees).</p>\n<p><iframe src="https://codesandbox.io/embed/css3-transform-rotate-zew59?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>4. Skew</h4>\n<pre class="hljs"><code><span class="hljs-selector-class">.element</span> {\n\t<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">50deg</span>, <span class="hljs-number">20deg</span>);\n}\n</code></pre>\n<p>Skew là phương thức cho phép bạn nghiêng phần tử. Cũng như phưng thức translate() và rotate(), phương thức skew() hỗ trợ phần tử nghiêng theo chiều ngang hoặc dọc và giá trị được ghi bằng độ (degrees).</p>\n<p><iframe src="https://codesandbox.io/embed/css3-transform-skew-wxf8r?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<h4>5. Sử dụng kết hợp nhiều phương thức</h4>\n<p>Ngoài việc sử dụng độc lập các phương thức translate(), scale(), rotate(), skew(). Ta có thể kết hợp các phương thức lại với nhau để tạo nên phần tử linh hoạt hơn.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.element</span> {\n\t<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;\n\t<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50px</span>, <span class="hljs-number">50px</span>) \n            <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>) \n            <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>) \n            <span class="hljs-built_in">skew</span>(<span class="hljs-number">50deg</span>, <span class="hljs-number">20deg</span>);\n}\n</code></pre>\n<h3>3D CSS Transform</h3>\n<p>3D CSS transform cũng tương tự 2D CSS transform. Nhưng 3D CSS transform hỗ trợ thêm một số phương thức cho không gian thứ ba.</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Translate\n */</span>\n<span class="hljs-selector-tag">translate3d</span>(<span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span>, <span class="hljs-selector-tag">z</span>)\n<span class="hljs-selector-tag">translateZ</span>(<span class="hljs-selector-tag">z</span>)\n\n<span class="hljs-comment">/**\n * Scale\n */</span>\n<span class="hljs-selector-tag">scale3d</span>(<span class="hljs-selector-tag">sx</span>, <span class="hljs-selector-tag">sy</span>, <span class="hljs-selector-tag">sz</span>)\n<span class="hljs-selector-tag">scaleZ</span>(<span class="hljs-selector-tag">sz</span>)\n\n<span class="hljs-comment">/**\n * Rotate\n */</span>\n<span class="hljs-selector-tag">rotateX</span>(<span class="hljs-selector-tag">rx</span>)\n<span class="hljs-selector-tag">rotateY</span>(<span class="hljs-selector-tag">ry</span>)\n<span class="hljs-selector-tag">rotateZ</span>(<span class="hljs-selector-tag">rz</span>)\n<span class="hljs-selector-tag">rotate3d</span>(<span class="hljs-selector-tag">rx</span>, <span class="hljs-selector-tag">ry</span>, <span class="hljs-selector-tag">rz</span>)\n\n<span class="hljs-comment">/**\n * Perspective\n * Giá trị này không ảnh hưởng đến phần tử nhưng\n * nó ảnh hưởng sự biến đổi các yếu tố của 3D transform\n * như rotateX(), rotateY()...\n */</span>\n<span class="hljs-selector-tag">perspective</span>(<span class="hljs-selector-tag">value</span>)\n</code></pre>\n<h3>Trình duyệt hỗ trợ</h3>\n<p>Hiện tại CSS3 Transform đã hỗ trợ rất nhiều trình duyệt.</p>\n\x3c!-- caniuse features="transforms2d"  --\x3e\n\x3c!-- caniuse features="transforms3d"  --\x3e\n'}},189:function(n,t){n.exports={attributes:{title:"HTML5 Fullscreen API",slug:"html5-fullscreen-api",date:"2013-09-22",tags:["javascript"]},html:'<p>Khi muốn xem trang web ở chế độ toàn màn hình bạn thường nhấn phím <strong>F11</strong>. Tuy nhiên khi bạn chỉ muốn hiển thị chế độ toàn màn hình cho một phần tử nào đó thì chúng ta không thể thực hiện bằng cách trên.</p>\n<p>HTML5 cung cấp một API mới cho phép bạn hiển thị toàn màn hình bất kì phần tử nào của một trang web đó là HTML5 Fullscreen API.</p>\n<p>Các phương thức chính của HTML5 Fullscreen API.</p>\n<table>\n<thead>\n<tr>\n<th>Phương thức</th>\n<th>Mô tả</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.requestFullScreen() <br> .webkitRequestFullScreen() <br> .mozRequestFullScreen()</td>\n<td>Hiển thị toàn màn hình với phần tử được chỉ định</td>\n</tr>\n<tr>\n<td>.cancelFullScreen() <br> .webkitCancelFullScreen() <br> .mozRequestFullScreen()</td>\n<td>Thoát chế độ hiển thị toàn màn hình</td>\n</tr>\n<tr>\n<td>.fullScreen <br> .webkitIsFullScreen <br> .mozfullScreen</td>\n<td>Xem phần tử đang hiển thị ở chế độ toàn màn hình</td>\n</tr>\n<tr>\n<td>:full-screen <br> :-webkit-full-screen <br> :-moz-fullscreen</td>\n<td>Tương tác với phần tử được chỉ định khi ở chế độ toàn màn hình.</td>\n</tr>\n</tbody>\n</table>\n<p><br>HTML5 Fullscreen API thực sự rất hữu ích khi bạn làm việc với các phần tử như hình ảnh hoặc video. Sau đây để hiểu rõ hơn cách làm việc với HTML5 Fullscreen API, mình xin viết một hướng dẫn việc sử dụng fullscreen với <strong><a href="/blog/html5-geolocation-va-leaflet/">bản đồ sử dụng leaflet</a></strong>.</p>\n<h3>HTML</h3>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"map-wrapper"</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"map"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"map"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fullscreen"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fullscreen"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Fullscreen<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<h3>JavaScript</h3>\n<h4>Chế độ FullScreen</h4>\n<pre class="hljs"><code><span class="hljs-keyword">var</span> fullscreen_element = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'map\'</span>);\n<span class="hljs-keyword">var</span> fullscreen_button = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'fullscreen\'</span>);\n\nfullscreen_button.addEventListener(<span class="hljs-string">\'click\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n\tlaunchFullScreen(fullscreen_element);\n}, <span class="hljs-literal">false</span>);\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">launchFullScreen</span>(<span class="hljs-params">element</span>) </span>{\n\t<span class="hljs-keyword">if</span> (element.requestFullScreen) {\n\t\telement.requestFullScreen();\n\t} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.mozRequestFullScreen) {\n\t\telement.mozRequestFullScreen();\n\t} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.webkitRequestFullScreen) {\n\t\telement.webkitRequestFullScreen();\n\t} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.msRequestFullScreen) {\n\t\telement.msRequestFullScreen();\n\t}\n}\n</code></pre>\n<h4>Thoát chế độ FullScreen</h4>\n<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cancelFullscreen</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.cancelFullScreen) {\n    <span class="hljs-built_in">document</span>.cancelFullScreen();\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.mozCancelFullScreen) {\n    <span class="hljs-built_in">document</span>.mozCancelFullScreen();\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.webkitCancelFullScreen) {\n    <span class="hljs-built_in">document</span>.webkitCancelFullScreen();\n  }\n}\n</code></pre>\n<h3>CSS</h3>\n<p>Ở chế độ fullscreen ta có thể stylesheet cho thành phần được lựa chọn.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.map</span><span class="hljs-selector-pseudo">:-webkit-full-screen</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; }\n<span class="hljs-selector-class">.map</span><span class="hljs-selector-pseudo">:-moz-full-screen</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; }\n<span class="hljs-selector-class">.map</span><span class="hljs-selector-pseudo">:-ms-full-screen</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; }\n<span class="hljs-selector-class">.map</span><span class="hljs-selector-pseudo">:full-screen</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; }\n</code></pre>\n<p>HTML5 FullScreen API là một API đơn giản và mạnh mẽ. Mình hi vọng với API đơn giản này các bạn có thể viết những ứng dụng tương tác dễ dàng hơn khi cần hiển thị chế độ toàn màn hình.</p>\n\x3c!-- caniuse features="fullscreen"  --\x3e\n'}},190:function(n,t){n.exports={attributes:{title:"HTML5 Geolocation và Leaflet",slug:"html5-geolocation-va-leaflet",date:"2013-08-15",tags:["javascript"]},html:'<p>Geolocation là một API mới của HTML5 cho phép bạn truy cập vào vị trí hiện tại của bạn trên thiết bị.</p>\n<p>Geolocation gồm 3 phương thức:</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Lấy vị trí hiện tại của thiết bị\n */</span>\nnavigator.geolocation.getCurrentPosition();\n\n<span class="hljs-comment">/**\n * Cho phép khởi tạo một xử lí khi thiết bị thay đổi vị trí\n */</span>\nnavigator.geolocation.watchPosition();\n\n<span class="hljs-comment">/**\n * Xóa xử lí được khởi tạo trước đó bởi watchPosition()\n */</span>\nnavigator.geolocation.clearWatch()\n</code></pre>\n<h3>Lấy vị trí hiện tại sử dụng Geolocation</h3>\n<p>Để lấy vị trí hiện tại ta có thể sử dụng phương thức</p>\n<ul>\n<li><strong>navigator.geolocation.getCurrentPosition()</strong></li>\n</ul>\n<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">success</span>(<span class="hljs-params">position</span>) </span>{\n\t<span class="hljs-keyword">var</span>\tlatitude = position.coords.latitude,\n\t\tlongitude = position.coords.longitude,\n\t\taltitude = position.coords.altitude,\n\t\taccuracy = position.coords.accuracy;\n\n\t<span class="hljs-comment">// Hiển thị các thông số về vị trí hiện tại của bạn.</span>\n\t<span class="hljs-built_in">console</span>.log(latitude);\n\t<span class="hljs-built_in">console</span>.log(longitude);\n\t<span class="hljs-built_in">console</span>.log(altitude);\n\t<span class="hljs-built_in">console</span>.log(accuracy);\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params"></span>) </span>{\n\t<span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Không thể truy cập đến vị trí hiện tại.\'</span>);\n}\n\n<span class="hljs-keyword">var</span> options = {\n  <span class="hljs-attr">enableHighAccuracy</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,\n  <span class="hljs-attr">maximumAge</span>: <span class="hljs-number">0</span>\n}\n\nnavigator.geolocation.getCurrentPosition(success, error, options);\n</code></pre>\n<h3>Leaflet là gì?</h3>\n<p><a href="http://leafletjs.com/">Leaflet</a> là một thư viện JavaScript mã nguồn mở cung cấp các tương tác với bản đồ thân thiện với các thiết bị di động.</p>\n<p>Cũng như Google Map API. Nhưng Leaflet được thiết kế đơn giản, hiệu quả và dễ sử dụng:</p>\n<ul>\n<li>Dễ dàng tương tác với HTML5 và CSS3.</li>\n<li>Hỗ trợ rất nhiều plugin.</li>\n<li>Tài liệu hướng dẫn về API rất tốt và dễ sử dụng</li>\n<li>Cung cấp đầy đủ các tính năng để tương tác với bản đồ.</li>\n</ul>\n<p>Với API của Leaflet ta có thể tương tác với bản đồ một cách linh hoạt hơn. Sau đây là ví dụ làm việc đơn giản với Leaflet</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Khởi tạo bản đồ với "map" div\n * với vị trí latitude, longitude và zoom bản đồ\n */</span>\n<span class="hljs-keyword">var</span> map = L.map(<span class="hljs-string">\'map\'</span>, {\n\t<span class="hljs-attr">center</span>: [latitude, longitude],\n\t<span class="hljs-attr">zoom</span>: <span class="hljs-number">16</span>\n});\n\n<span class="hljs-comment">/**\n * Khởi tạo và hiển thị các lớp trên bản đồ\n * Bạn vào Cloudmade.com đăng kí một tài khoản để có thể lấy API\n */</span>\n<span class="hljs-keyword">var</span> tile = <span class="hljs-string">\'http://{s}.tile.cloudmade.com/{key}/{styleId}/256/{z}/{x}/{y}.png\'</span>;\n\nL.tileLayer(tile, {\n    <span class="hljs-attr">key</span>: <span class="hljs-string">\'760506895e284217a7442ce2efe97797\'</span>, <span class="hljs-comment">// Đây là API mình đã đăng kí với cloudmade</span>\n    <span class="hljs-attr">styleId</span>: <span class="hljs-number">103288</span>,\n    <span class="hljs-attr">maxZoom</span>: <span class="hljs-number">16</span>\n  }).addTo(map);\n\n<span class="hljs-comment">/**\n * Đánh dấu vị trí trên bản đồ\n */</span>\n<span class="hljs-keyword">var</span> maker = L.marker([latitude, longitude]).addTo(map);\n<span class="hljs-comment">// Hiển thị Popup tại vị trí đánh dấu</span>\nmarker.bindPopup(<span class="hljs-string">\'&lt;p&gt;Tiêu đề...&lt;/p&gt;\'</span>).openPopup();\n</code></pre>\n<p><iframe src="https://codesandbox.io/embed/web-geolocation-and-leaflet-rwcwo?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<p>Ngoài ra, bạn có thể vào những liên kết sau để tìm hiểu thêm về Geolocation và Leaflet:</p>\n<ul>\n<li><a href="http://www.w3.org/TR/geolocation-API/">W3 - Geolocation API</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/WebAPI/Using_geolocation">Developer Mozilla</a></li>\n<li><a href="http://leafletjs.com/reference.html">Leaflet API</a></li>\n<li><a href="http://cloudmade.com/">Cloudmade</a></li>\n</ul>\n'}},191:function(n,t){n.exports={attributes:{title:"PostCSS",slug:"postcss",date:"2018-11-01T18:03:37.000Z",tags:["css","sass","postcss"]},html:'<p>Lần trước tôi có đề cập tới <a href="/blog/redesign-va-nhung-gi-t%C3%B4i-hoc/#postcss">PostCSS</a>. Nay tôi sẽ giới thiệu tổng quan về PostCSS cho các bạn. Cũng như <a href="/blog/su-dung-sass/">Sass</a>, PostCSS cũng cung cấp các chức năng như Sass:</p>\n<ul>\n<li>Khai báo biến</li>\n<li>Nhúng các tập tin CSS (Partial import)</li>\n<li>Cú pháp lồng (Nesting)</li>\n<li>Sử dụng lại với Mixins</li>\n<li>Kế thừa (Extends)</li>\n</ul>\n<h3>Sử dụng PostCSS</h3>\n<p>Trước hết PostCSS một công cụ cho việc chuyển đổi CSS sử dụng JavaScript. Bạn có thể sử dụng nhiều công cụ như Webpack, Rollup, Gulp hay Grunt để chuyển đổi PostCSS sang CSS. Nhưng để đơn giản bạn nên bắt đầu làm quen PostCSS với <a href="https://github.com/postcss/postcss-cli">PostCSS CLI</a></p>\n<p>Cách sử dụng để chuyển đổi như sau</p>\n<pre class="hljs"><code><span class="hljs-meta">$</span><span class="bash"> postcss [input.css] -o [output.css] </span>\n</code></pre>\n<p><strong>Chú ý:</strong> <em>Bạn có thể đổi <code>[input.css]</code> và <code>[output.css]</code> thành tên tập tin bạn mong muốn.</em></p>\n<p>Hoặc bạn có thể cấu hình thêm ở tập tin <strong>postcss.config.js</strong></p>\n<pre class="hljs"><code><span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">plugins</span>: {\n    <span class="hljs-string">\'postcss-import\'</span>: {},\n    <span class="hljs-string">\'postcss-each\'</span>: {},\n    <span class="hljs-string">\'postcss-nested\'</span>: {},\n    <span class="hljs-string">\'postcss-preset-env\'</span>: { <span class="hljs-attr">stage</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">browsers</span>: <span class="hljs-string">\'last 2 versions\'</span> }\n  }\n};\n</code></pre>\n<h3>Autoprefixer và Browserlist</h3>\n<p><a href="https://github.com/postcss/autoprefixer"><strong>Autoprefixer</strong></a> là một PostCSS plugin phân tích cú pháp CSS của bạn và thêm các tiền tố (vendor prefixes) như <code>-wekit-</code>, <code>-moz-</code>, <code>-ms-</code>, <code>-o-</code> tương ứng với các trình duyệt.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.example</span> {\n  <span class="hljs-attribute">display</span>: grid;\n  <span class="hljs-attribute">user-select</span>: none;\n}\n</code></pre>\n<p>Biên dịch thành CSS</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.example</span> {\n  <span class="hljs-attribute">display</span>: -ms-grid;\n  <span class="hljs-attribute">display</span>: grid;\n  <span class="hljs-attribute">-webkit-user-select</span>: none;\n  <span class="hljs-attribute">-moz-user-select</span>: none;\n  <span class="hljs-attribute">-ms-user-select</span>: none;\n  <span class="hljs-attribute">user-select</span>: none;\n}\n</code></pre>\n<p>Autoprefixer còn cho phép bạn có thể lựa chọn tiền tố cho từng trình duyệt cụ thể</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">autoprefixer</span>({ <span class="hljs-attribute">browsers</span>: <span class="hljs-string">\'last 2 versions, &gt; 1%\'</span> })\n</code></pre>\n<p>Với <a href="https://github.com/browserslist/browserslist"><strong>Browserlist</strong></a> thì việc cấu hình tiền tố cho từng trình duyệt cụ thể sẽ dễ dàng hơn với việc cấu hình trong <strong><code>package.json</code></strong></p>\n<pre class="hljs"><code>{\n  <span class="hljs-attr">"browserslist"</span>: [\n    <span class="hljs-string">"last 1 version"</span>,\n    <span class="hljs-string">"&gt; 1%"</span>,\n  ]\n}\n</code></pre>\n<p>hoặc trong tập tin <strong><code>.browserslistrc</code></strong></p>\n<pre class="hljs"><code><span class="hljs-selector-tag">last</span> 1 <span class="hljs-selector-tag">version</span>\n&gt; 1%\n</code></pre>\n<h3>PostCSS Preset Env</h3>\n<p>Ngoài việc định nghĩa biến bằng các thuộc tính CSS. <a href="https://preset-env.cssdb.org/"><strong>PostCSS Preset Env</strong></a> còn có những biến định nghĩa <em>media queries</em>, <em>selectors</em>, các chức năng về <em>color function</em>, <em>pseudo-class</em>, <em>nesting rules</em>... Bên cạnh đó còn giúp chuyển đổi các CSS hiện đại thành CSS mà hầu hết trình duyệt đều hỗ trợ.</p>\n<pre class="hljs"><code><span class="hljs-selector-pseudo">:root</span> {\n  <span class="hljs-attribute">--length</span>: <span class="hljs-number">24px</span>;\n}\n\n<span class="hljs-keyword">@custom-media</span> --tablet (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">40em</span>);\n<span class="hljs-keyword">@custom-selector</span> :--heading h1, h2, h3, h4, h5, h6;\n\n<span class="hljs-selector-class">.round</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">var</span>(--length);\n  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">var</span>(--length);\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;\n}\n\n<span class="hljs-selector-class">.site</span> <span class="hljs-selector-pseudo">:--heading</span> + <span class="hljs-selector-tag">p</span> {\n  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1rem</span>;\n}\n\n<span class="hljs-keyword">@media</span> (--tablet) {\n  <span class="hljs-selector-class">.site</span> {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;\n  }\n}\n</code></pre>\n<p>Biên dịch thành CSS</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.round</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;\n}\n\n<span class="hljs-selector-class">.site</span> <span class="hljs-selector-tag">h1</span> + <span class="hljs-selector-tag">p</span>,\n<span class="hljs-selector-class">.site</span> <span class="hljs-selector-tag">h2</span> + <span class="hljs-selector-tag">p</span>,\n<span class="hljs-selector-class">.site</span> <span class="hljs-selector-tag">h3</span> + <span class="hljs-selector-tag">p</span>,\n<span class="hljs-selector-class">.site</span> <span class="hljs-selector-tag">h4</span> + <span class="hljs-selector-tag">p</span>,\n<span class="hljs-selector-class">.site</span> <span class="hljs-selector-tag">h5</span> + <span class="hljs-selector-tag">p</span>,\n<span class="hljs-selector-class">.site</span> <span class="hljs-selector-tag">h6</span> + <span class="hljs-selector-tag">p</span> {\n  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1rem</span>;\n}\n\n<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">40em</span>) {\n  <span class="hljs-selector-class">.site</span> {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;\n  }\n}\n</code></pre>\n<h3>CSS Modules</h3>\n<p>Mỗi lúc viết CSS bạn lo lắng tên của các <code>classes</code> được sử dụng quá chung chung. <a href="https://github.com/css-modules/css-modules"><strong>CSS Modules</strong></a> giúp tên các <code>classes</code> bạn định nghĩa được ánh xạ từ tên chung đó một cách có ý nghĩa nhất. CSS Modules thực tế được dùng nhiều với các bạn viết JavaScript nhiều hơn so với các bạn Web Designer (chỉ viết HTML và CSS) vì những ưu điểm:</p>\n<ul>\n<li>Dễ dàng tái sử dụng</li>\n<li>Không bị ảnh hưởng tới những chỗ khác</li>\n<li>Phụ thuộc rõ ràng vào chính bản thân nó</li>\n<li>Không có phạm vi Global mà chỉ nằm trong Scoped</li>\n</ul>\n<p>Ví dụ ta có một file <code>style.css</code></p>\n<pre class="hljs"><code><span class="hljs-comment">/* style.css */</span>\n<span class="hljs-selector-class">.className</span> {\n  <span class="hljs-attribute">color</span>: green;\n}\n</code></pre>\n<p>Khi nhúng vào trong JavaScript module.</p>\n<pre class="hljs"><code><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">\'./style.css\'</span>;\n\nelement.innerHTML = <span class="hljs-string">\'&lt;div class="\'</span> + styles.className + <span class="hljs-string">\'"&gt;\'</span>;\n</code></pre>\n<p>Sau khi thực thi ta sẽ được kết quả</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">\n  <span class="hljs-selector-class">._styles__title_2qkr5</span> {\n    <span class="hljs-attribute">color</span>: green;\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"element"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"_styles__title_2qkr5"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<h3>Stylelint</h3>\n<p><a href="https://stylelint.io/"><strong>Stylelint</strong></a> giúp bạn tránh những lỗi và đảm bảo convention cũng như cải thiện CSS khi bạn code CSS được toàn vẹn với những quy tắc chuẩn hoá và chặt chẽ. Stylelint cũng cung cấp cho PostCSS một plugin để dễ dàng cấu hình.</p>\n<h3>PostCSS Có Gì Hay</h3>\n<p>Tới đây, một số bạn sẽ thắc mắc vậy PostCSS có gì hay hơn Sass nhỉ? Sass hầu như cũng làm được các chức năng trên cơ mà. Tuy nhiên PostCSS còn có những ưu điểm:</p>\n<h4>Từ Sass đến PostCSS</h4>\n<p>Bạn dễ dàng có thể tái sử dụng code <a href="https://github.com/jonathantneal/postcss-sass">Sass</a> hay <a href="https://github.com/postcss/postcss-scss">SCSS</a> trong PostCSS, thậm chí <a href="https://github.com/shellscape/postcss-less">Less</a> hay <a href="https://github.com/seaneking/poststylus">Stylus</a>.</p>\n<h4>PostCSS Plugin</h4>\n<p>Hệ thống <a href="https://www.postcss.parts/">plugin của PostCSS</a> rất đồ sộ và rất nhiều <a href="https://github.com/postcss/postcss/blob/master/docs/plugins.md">plugin mạnh mẽ</a> như:</p>\n<ul>\n<li>\n<p><a href="https://github.com/hail2u/node-css-mqpacker">CSS MQPacker</a>: đóng gói các quy tắc về <em>media queries</em> giống nhau về thành một</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">h1</span> {\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;\n}\n\n<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">768px</span>) {\n  <span class="hljs-selector-tag">h1</span> {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;\n  }\n}\n\n<span class="hljs-selector-tag">h3</span> {\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;\n}\n\n<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">768px</span>) {\n  <span class="hljs-selector-tag">h3</span> {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;\n  }\n}\n</code></pre>\n<p>Biên dịch thành CSS</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">h1</span> {\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;\n}\n\n<span class="hljs-selector-tag">h3</span> {\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;\n}\n\n<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">768px</span>) {\n  <span class="hljs-selector-tag">h1</span> {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;\n  }\n\n  <span class="hljs-selector-tag">h3</span> {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;\n  }\n}\n</code></pre>\n</li>\n<li>\n<p><a href="https://cssnano.co/">CSSNano</a>: Tối ưu code CSS như <em>minification</em>, <em>compresses inline SVG</em>, <em>duplicates</em>, <em>comments</em>, <em>unused rule</em>...</p>\n</li>\n</ul>\n<h4>Tuỳ biến PostCSS</h4>\n<p>Chỉ cần một ít kiến thức về JavaScript bạn có thể dễ dàng <a href="https://github.com/postcss/postcss/blob/master/docs/writing-a-plugin.md">viết plugin cho PostCSS</a> với phong cách của riêng mình như:</p>\n<ul>\n<li><a href="https://github.com/chancancode/postcss-canadian-stylesheets">Canadian Style Sheets</a></li>\n<li><a href="https://github.com/dangvanthanh/postcss-tipsy">Tipsy</a></li>\n<li><a href="https://github.com/juanfran/postcss-trolling">Trolling Style Sheets</a></li>\n<li><a href="https://github.com/dangvanthanh/postcss-longshadow-text">Long Shadow Text</a></li>\n</ul>\n'}},192:function(n,t){n.exports={attributes:{title:"Redesign và những gì tôi học",slug:"redesign-va-nhung-gi-tui-hoc",date:"2016-12-25",tags:["personal","css","postcss","hugo","javascript"]},html:'<p>Thực ra bài viết này đã có từ lâu, nhưng tôi vẫn để nó ở chế độ bản nháp và cũng do lười (quá lười) nên cũng từ lâu tôi cũng bỏ thói quen viết blog. Nay tôi chia sẻ những kinh nghiệm khi thiết kế lại blog này.</p>\n<h3>Thiết kế</h3>\n<p>Vì không phải là một Designer nên tôi không giỏi về thiết kế lắm. Nên tôi vẫn giữ kiểu thiết kế tối giản (minimalism) cho trang blog này.</p>\n<p>Blog mới cung cấp hai giao diện, giúp bạn không bị mỏi mắt khi đọc lâu. Bạn nhấn vào biểu tượng ở góc phải để đổi sang giao diện yêu thích nhé. Có thể tôi sẽ cập nhật thêm về màu sắc xíu nữa cho phù hợp.</p>\n<p><img src="/images/blog/blog_v2.png" alt="Dang Thanh Blog - phiên bản light and dark"></p>\n<p>tôi cũng đã xoá đi hệ thống phản hồi (trước đây tôi dùng <a href="https://disqus.com/">Disqus</a>) vì thấy nó không hữu ích. Các bạn có thể liên hệ hoặc trao đổi với tôi qua <a href="mailto:dangvanthanh@dangthanh.org">email</a>.</p>\n<h3>Hugo</h3>\n<p>So với <a href="/blog/blog-va-toi/">Jekyll</a>, <a href="https://gohugo.io/">Hugo</a> hỗ trợ xây dựng blog nhanh và tích hợp live reload dễ dàng cho việc phát triển blog hơn.</p>\n<p>Hugo cung cấp thêm nhiều chức năng mới như:</p>\n<ul>\n<li>Chuyển đổi <code>SCSS</code> hay <code>Sass</code> sang CSS</li>\n<li>Hỗ trợ tốt <code>PostCSS</code></li>\n<li>Tối ưu các tập tin <code>CSS</code>, <code>JavaScript</code>, <code>JSON</code>, <code>HTML</code>, <code>SVG</code>, <code>XML</code></li>\n<li>Cải tiến hiển thị hightlight cho code với <a href="https://github.com/alecthomas/chroma">Chroma</a></li>\n</ul>\n<p>Bên cạnh đó, việc chuyển đổi sang Hugo giúp tôi tuỳ biến phân trang dễ dàng. Giúp bạn dễ dàng chọn được trang cũng như tìm kiếm bài viết theo từng chủ đề trong chuyên mục <a href="/tags">lưu trữ</a> cùng với hệ thống phân <a href="/tags/css/">bài viết theo thứ tự alphabet</a>.</p>\n<h3>CSS</h3>\n<p>Vì lí do tối giản cả thiết kế lẫn CSS. Nên với phiên bản này tôi không sử dụng <a href="http://tachyons.io/">Tachyons</a> nữa. Mặc dù Tachyons rất hữu ích, giúp việc xây dựng giao diện tuỳ biến cao, cũng như xây dựng những giao diện phức tạp một cách dễ dàng. Với một vài thay đổi dưới đây, blog đã được cải tiến tốc độ cũng khá nhiều.</p>\n<h4>CSS Grid</h4>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout">CSS Grid</a> giúp tôi tuỳ biến web mình dễ dàng hơn so với <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox">Flexbox</a> trong cách phân chia bố cục của trang blog này cũng như tuỳ biến Responsive cho màn hình desktop và mobile.</p>\n<pre class="hljs"><code><span class="hljs-keyword">@custom-media</span> --tablet (width &gt;= <span class="hljs-number">800px</span>);\n\n<span class="hljs-selector-class">.site</span> {\n  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">60rem</span>;\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;\n\n  @media (--tablet) {\n    <span class="hljs-attribute">display</span>: grid;\n    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">3</span>fr;\n  }\n}\n</code></pre>\n<p><strong>Chú ý:</strong> <em>Đây là cú pháp tôi viết sử dụng PostCSS được trình bày ở dưới.</em></p>\n<h4>Times Newer Roman, Roboto Slab và Ubuntu Mono</h4>\n<p>Việc thay đổi font chữ <a href="https://fonts.google.com/specimen/Muli">Muli</a> sang sử dụng phông chữ <a href="https://timesnewerroman.com/">Times Newer Roman</a> là một bộ phông chữ tương tự Times New Roman nhưng độ dài mỗi ký tự rộng hơn (theo như tác giả là 5 - 10%) giúp bạn dễ dàng đọc nội dung trên blog hơn.</p>\n<p>Nhưng sau khi xem blog trên Windows tôi thấy phông chữ Times Newer Roman không hiển thị đẹp lắm mặc dù trên Mac hay Linux phông chữ vẫn hiển thị rất đẹp nên cuối cùng cũng chọn phông chữ <a href="https://fonts.google.com/specimen/Roboto+Slab">Roboto Slab</a>.</p>\n<p>Còn với code highlight tôi sử dụng <a href="https://fonts.google.com/specimen/Ubuntu+Mono">Ubuntu Mono</a>. Mặc dù vẫn thích những phông chữ hỗ trợ <code>ligatures</code> như <a href="https://github.com/tonsky/FiraCode">Fira Code</a> nhưng Ubuntu Mono vẫn dễ nhìn hơn với các bạn chưa quen với <code>ligatures</code>.</p>\n<h4>CSS Font Loading API: Preload</h4>\n\x3c!-- caniuse features="link-rel-preload"  --\x3e\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"preload"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/fonts/TimesNewerRoman-Regular.otf"</span> <span class="hljs-attr">as</span>=<span class="hljs-string">"font"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"font/otf"</span> <span class="hljs-attr">crossorigin</span>&gt;</span>\n</code></pre>\n<p>Preload trên giúp phông chữ của bạn được nạp vào trang web nhanh. Đồng thời việc khai báo trên giúp việc quản lý phông chữ nhúng vào dễ dàng so với việc sử dụng <code>@font-face</code></p>\n<h4>CSS Font Loading API: Font Display</h4>\n\x3c!-- caniuse features="css-font-rendering-controls"  --\x3e\n<pre class="hljs"><code><span class="hljs-keyword">@font-face</span> {\n  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"Times Newer Roman"</span>;\n  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;\n  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(/fonts/TimesNewerRoman-Bold.otf) <span class="hljs-built_in">format</span>(<span class="hljs-string">"opentype"</span>);\n  <span class="hljs-attribute">font-display</span>: swap;\n}\n</code></pre>\n<p>Khi bạn nhúng một phông chữ bằng <code>@font-face</code> hoặc từ <a href="https://fonts.google.com/">Google Fonts</a> lúc đầu phông chữ hiển thị làm bạn có cảm giác giật giật (nhấp nhánh). Với\n<code>font-display: swap</code> làm cho khoảng thời gian tải phông chữ và quá trình hiển thị phông chữ mượt hơn. Hạn chế của thuộc tính này là chỉ hỗ trợ những trình duyệt mới.</p>\n<h3>PostCSS</h3>\n<p>Trước đây tôi vẫn dùng <a href="/blog/su-dung-sass/">Sass</a> trong một thời gian dài. Bênh cạnh những lợi ích của Sass như dễ dàng bảo trì, tối ưu, tiếm kiệt thời gian viết code CSS so với cách viết truyền thống thì <a href="https://postcss.org/">PostCSS</a> cung cấp thêm nhiều chức năng và linh hoạt hơn so với Sass như <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a>, <a href="https://github.com/css-modules/css-modules">CSS Modules</a>, <a href="https://github.com/browserslist/browserslist">Browserslist</a>... Sắp tới tôi cũng sẽ giới thiệu về PostCSS để các bạn có thể hiểu rõ hơn.</p>\n<p>Ví dụ ta muốn xây dựng một web với hai giao diện. Với CSS truyền thống:</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fffafa</span>;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#242424</span>;\n}\n\n<span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.night</span> {\n  <span class="hljs-attribute">background</span>: <span class="hljs-number">#222233</span>;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;\n}\n</code></pre>\n<p>Nhưng với PostCSS bạn có thể viết.</p>\n<pre class="hljs"><code><span class="hljs-selector-pseudo">:root</span> {\n  <span class="hljs-attribute">--background</span>: <span class="hljs-number">#fffafa</span>;\n  <span class="hljs-attribute">--color</span>: <span class="hljs-number">#242424</span>;\n}\n\n<span class="hljs-selector-class">.night</span> {\n  <span class="hljs-attribute">--background</span>: <span class="hljs-number">#222233</span>;\n  <span class="hljs-attribute">--color</span>: <span class="hljs-number">#fff</span>;\n}\n\n<span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--background);\n  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color);\n}\n</code></pre>\n<p>Với cách viết này bạn sẽ dễ dàng cập nhật thêm các biến giá trị tuỳ biến.</p>\n<h3>Webp Images</h3>\n\x3c!-- caniuse features="webp"  --\x3e\n<p>Ban đầu tôi tính chuyển tất cả hình ảnh của web hiện tại sang <code>webp</code>. Nhưng cả trình duyệt Safari và Firefox đều không hỗ trợ tốt định dạng này. Nên cuối cùng vẫn phải dùng <code>png</code> và <code>jpg</code> để nó có thể hỗ trợ hầu hết trình duyệt.</p>\n<h3>Service Worker and Offine Web</h3>\n<p>Offine web giúp blog này có thể chạy ngay cả khi bạn không kết Internet (bạn có thể tắt Internet và trải nghiệm). Ở đây mình hộ trợ offine web với <strong><a href="https://developers.google.com/web/fundamentals/primers/service-workers/">service worker</a></strong> và dùng <strong><a href="https://developers.google.com/web/tools/workbox/">Workbox</a></strong> một module được viết bằng Node.js để tạo ra tài nguyên offine cho Hugo.</p>\n'}},193:function(n,t){n.exports={attributes:{title:"Sử dụng Icon Fonts",slug:"su-dung-icon-fonts",date:"2013-10-06",tags:["css"]},html:'<p>Icon font ngày được sử dụng rộng rãi trong các website hiện nay. Icon font mang nhiều ưu điểm:</p>\n<ul>\n<li>Giảm số lượng HTTP Request, giúp website của bạn load nhanh hơn.</li>\n<li>Dễ dàng thay đổi màu sắc, kích thước của biểu tượng.</li>\n<li>Cung cấp nhiều biểu tượng phù hợp giúp bạn tiết kiệm thời gian thiết kế.</li>\n<li>Có thể sử dụng CSS3 như transition, transform, text-shadow giúp các icon được linh hoạt hơn.</li>\n</ul>\n<p>Ta có thể nhúng icons vào trong CSS đơn giản như sau:</p>\n<pre class="hljs"><code><span class="hljs-keyword">@font-face</span> {\n  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"your-fonts"</span>;\n  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">"fonts/your-fonts.eot"</span>);\n  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">"fonts/your-fonts.eot?#iefix"</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">"embedded-opentype"</span>), \n    <span class="hljs-built_in">url</span>(<span class="hljs-string">"fonts/your-fonts.woff"</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">"woff"</span>), \n    <span class="hljs-built_in">url</span>(<span class="hljs-string">"fonts/your-fonts.ttf"</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">"truetype"</span>), \n    <span class="hljs-built_in">url</span>(<span class="hljs-string">"fonts/your-fonts.svg#[set]Foundicons"</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">"svg"</span>);\n  <span class="hljs-attribute">font-weight</span>: normal;\n  <span class="hljs-attribute">font-style</span>: normal;\n}\n\n<span class="hljs-selector-attr">[class*=<span class="hljs-string">"icon-"</span>]</span> {\n  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"your-fonts"</span>;\n  <span class="hljs-attribute">speak</span>: none;\n  <span class="hljs-attribute">font-style</span>: normal;\n  <span class="hljs-attribute">font-weight</span>: normal;\n  <span class="hljs-attribute">font-variant</span>: normal;\n  <span class="hljs-attribute">text-transform</span>: none;\n  <span class="hljs-attribute">line-height</span>: inherit;\n  <span class="hljs-attribute">-webkit-font-smoothing</span>: antialiased;\n}\n\n<span class="hljs-selector-attr">[class*=<span class="hljs-string">"icon-"</span>]</span><span class="hljs-selector-pseudo">:before</span> {\n  <span class="hljs-attribute">content</span>: <span class="hljs-string">"your-fonts-character"</span>;\n}\n</code></pre>\n<p>Trong bài viết này mình sẽ giới thiệu các bạn về IcoMoon và We Love Icon Fonts.</p>\n<h3>IcoMoon</h3>\n<p><img src="/images/blog/icomoon.jpg" alt="IcoMoon"></p>\n<p><a href="http://icomoon.io/">IcoMoon</a> cung cấp cho bạn hơn 450 icons miễn phí. Bên cạnh đó ngoài những icons của IcoMoon, IcoMoon cho phép bạn lựa chọn và tải các icons bạn muốn với những bộ icons khác như Broccolidry, Entypo, Font Awesome...với số lượng lên đến gần 3800 icons. Ngoài ra IcoMoon còn cho phép bạn tải các thiết kế của bạn lên (tập tin SVG) để customize thành fonts bạn yêu thích.</p>\n<h3>We Love Icon Fonts</h3>\n<p><img src="/images/blog/weloveiconfonts.jpg" alt="We Love Icon Fonts"></p>\n<p><a href="http://weloveiconfonts.com/">We Love Icon Fonts</a> là một mã nguồn mở và dịch vụ lưu trữ miễn phí các icon fonts. Cũng như IcoMoon, We Love Icon Fonts cũng cung cấp cho bạn rất nhiều bộ icons miễn phí khác như Fontelico, Maki, Typicons, Zocial.</p>\n<h3>Một số icons fonts miễn phí khác</h3>\n<ul>\n<li><a href="http://www.entypo.com/">Entypo</a></li>\n<li><a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a></li>\n<li><a href="http://zurb.com/playground/foundation-icons">Foundation Icon</a></li>\n<li><a href="http://www.alessioatzeni.com/meteocons/">Meteocons</a></li>\n<li><a href="http://typicons.com/">Typicons</a></li>\n<li><a href="http://icons.marekventur.de/">Raphaël Icon</a></li>\n</ul>\n'}},194:function(n,t){n.exports={attributes:{title:"Sử dụng Sass",slug:"su-dung-sass",date:"2013-07-24",tags:["css","sass"]},html:'<p>Bạn đã từng nghe về những CSS Preprocessors như <a href="http://lesscss.org/">Less</a>, <a href="http://sass-lang.com/">Sass</a> hay <a href="http://learnboost.github.io/stylus/">Stylus</a>.</p>\n<h3>CSS Preprocessor là gì?</h3>\n<p>CSS Preprocessor là một ngôn ngữ kịch bản mở rộng của CSS và được biên dịch thành cú pháp CSS.</p>\n<p>Sau đây là một vài lợi ích của việc sử dụng CSS Preprocessor:</p>\n<ul>\n<li>Tiết kiệm thời gian viết CSS.</li>\n<li>Dễ dàng bảo trì và phát triển CSS.</li>\n<li>Linh hoạt và có thể sử dụng lại các CSS.</li>\n<li>Các tập tin CSS được tổ chức rõ ràng.</li>\n</ul>\n<h3>Sass là gì?</h3>\n<p>Sass là một mở rộng CSS cung cấp thêm các quy tắc xếp chồng (nested rules), biến (variables), mixins, thừa kế (selector inheritance), các hàm (function)...</p>\n<p>Để cài đặt Sass đầu tiên bạn cần cài đặt Ruby. Mình đang xài Windows nên mình sẽ hướng dẫn các bạn cài đặt Ruby trên Windows thông qua <a href="http://rubyinstaller.org/">RubyInstaller</a>.</p>\n<p>Sau khi cài đặt xong Ruby bạn cài đặt môi trường cho Ruby <strong>(Computer -&gt; Properties -&gt; Advanced -&gt; Enviroment Variables... )</strong>.</p>\n<p><img src="/images/blog/rubyinstaller.jpg" alt="Cài đặt môi trường cho Ruby trên Windows"></p>\n<p>Tiếp theo bạn cài đặt Sass bằng cách mở CMD và gõ:</p>\n<pre class="hljs"><code>gem install sass\n</code></pre>\n<p>Sass cung cấp hai định dạng tập tin mở rộng .scss và .sass. Để chuyển đổi tập tin sass sang .css bạn thực hiện lệnh sau:</p>\n<pre class="hljs"><code>sass stylesheet.scss stylesheet.css\n</code></pre>\n<p>Để thực hiện chuyển đổi trong quá trình làm việc bạn thực hiện lệnh sau:</p>\n<pre class="hljs"><code>sass --watch stylesheet.scss:stylesheet.css\n</code></pre>\n<p>Bạn làm việc với thư mục và cần chuyển đổi tất cả thì có thể thực hiện lệnh sau:</p>\n<pre class="hljs"><code>sass --watch sass:css\n</code></pre>\n<p>Ở trên mình sử dụng command-line để thực hiện chuyển đổi sass sang css. Nếu bạn không thân thiện với command-line bạn có thể sử dụng các GUI sau:</p>\n<ul>\n<li><strong><a href="http://mhs.github.io/scout-app/">Scout</a></strong></li>\n<li><strong><a href="http://alphapixels.com/prepros/">Prepros</a></strong></li>\n<li><strong><a href="http://koala-app.com/">Koala</a></strong></li>\n</ul>\n<h3>Tại sao lại sử dụng Sass?</h3>\n<p>Sass, Less hay Stylus đều mạnh mẽ, việc sử dụng CSS Preprocessor nào còn phụ thuộc vào môi trường làm việc của bạn. Vì thế hãy tìm hiểu và chọn cho mình một CSS Preprocessor phù hợp nhất với mình.</p>\n<h3>Tổng quan về Sass</h3>\n<h4>Cú pháp</h4>\n<p>Như đã đề cập ở trên Sass hỗ trợ hai định dạng <strong>SCSS (.scss)</strong> và <strong>Sass (.sass)</strong>. Cú pháp SCSS không khác với cú pháp của CSS nên rất phù hợp với bạn nào muốn làm quen với Sass. Còn Sass thì cú pháp nghiêm ngặt hơn một tý, về cách thụt lùi khoảng trắng và không sử dụng &quot;<strong>{}</strong>&quot; và &quot;<strong>;</strong>&quot; (Mình thích sử dụng cú pháp Sass vì nó gọn gàng hơn)</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">body</span> {\n\t<span class="hljs-attribute">font</span>:\n\t\tfamily: Helvetica, Arial, sans-serif;\n\t\t<span class="hljs-attribute">size</span>: <span class="hljs-number">16px</span>;\n\t\t<span class="hljs-attribute">style</span>: normal;\n}\n</code></pre>\n<pre class="hljs"><code><span class="hljs-selector-tag">body</span>\n\t<span class="hljs-attribute">font</span>:\n\t\tfamily: Helvetica, Arial, sans-serif\n\t\tsize: <span class="hljs-number">16px</span>\n\t\tstyle: normal\n</code></pre>\n<p>Sau khi biên dịch ta sẽ có:</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">font-family</span>: Helvetica, Arial, sans-serif;\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;\n  <span class="hljs-attribute">font-style</span>: normal;\n}\n</code></pre>\n<p>Để các bạn dễ làm quen với Sass. Nên các ví dụ dưới đây mình sẽ dùng cú pháp SCSS.</p>\n<h4>Quy tắc xếp chồng (Nested Rules)</h4>\n<p>Các quy tắc xếp chồng sẽ giúp bạn đồng bộ những thành phần cùng với nhau.</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">nav</span> {\n  ul {\n    <span class="hljs-attribute">list-style</span>: none;\n  }\n  <span class="hljs-selector-tag">li</span> {\n    <span class="hljs-attribute">display</span>: inline-block;\n  }\n  <span class="hljs-selector-tag">a</span> {\n    <span class="hljs-attribute">display</span>: block;\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;\n  }\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">ul</span> {\n  <span class="hljs-attribute">list-style</span>: none;\n}\n<span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">li</span> {\n  <span class="hljs-attribute">display</span>: inline-block;\n}\n<span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">a</span> {\n  <span class="hljs-attribute">display</span>: block;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;\n}\n</code></pre>\n<p><strong>Quy tắc xếp chồng các thuộc tính</strong></p>\n<p>Trong Sass với những thuộc tính như margin, padding, border...chúng ta có thể xếp chồng để tránh những khai báo không cần thiết.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.heading</span> {\n\t<span class="hljs-attribute">text</span>:\n\t\talign: center;\n\t\t<span class="hljs-attribute">decoration</span>: none;\n\t\t<span class="hljs-attribute">transform</span>: uppercase;\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.heading</span> {\n  <span class="hljs-attribute">text-align</span>: center;\n  <span class="hljs-attribute">text-decoration</span>: none;\n  <span class="hljs-attribute">text-transform</span>: uppercase;\n}\n</code></pre>\n<p><strong>Quy tắc xếp chồng media queries</strong></p>\n<p>Sass cung cấp quy tắc xếp chồng giúp bạn làm việc tốt hơn với media queries.</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">header</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">960px</span>;\n  @media screen and (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">960px</span>) {\n    width: <span class="hljs-number">100%</span>;\n  }\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">header</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">960px</span>;\n}\n<span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width:</span> <span class="hljs-number">960px</span>) {\n  <span class="hljs-selector-tag">header</span> {\n    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;\n  }\n}\n</code></pre>\n<p><strong>Kí hiệu &quot;&amp;&quot;</strong></p>\n<p>Sass cung cấp một cách viết để thêm cho vùng chọn trước phổ biến như pseudo class như :hover, :active...Ngoài ra &quot;&amp;&quot; còn lồng ghép lớp cha cho thuộc tính được khai báo.</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">a</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f9f9f9</span>;\n  <span class="hljs-attribute">text-decoration</span>: none;\n  &amp;:hover {\n    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;\n  }\n  <span class="hljs-selector-tag">header</span> &amp; {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;\n  }\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">a</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f9f9f9</span>;\n  <span class="hljs-attribute">text-decoration</span>: none;\n}\n<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;\n}\n<span class="hljs-selector-tag">header</span> <span class="hljs-selector-tag">a</span> {\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;\n}\n</code></pre>\n<h4>Biến</h4>\n<p>Biến là một trong những tính năng hữu ích mà Sass cung cấp. Với Sass bạn có thể khai báo biến và sử dụng lại chúng khi cần thiết.</p>\n<pre class="hljs"><code>$<span class="hljs-selector-tag">base-font</span>: 16<span class="hljs-selector-tag">px</span>;\n$<span class="hljs-selector-tag">base-color</span>: <span class="hljs-selector-id">#444</span>;\n$<span class="hljs-selector-tag">heveltica</span>: <span class="hljs-selector-tag">Helvetica</span>, <span class="hljs-selector-tag">Arial</span>, <span class="hljs-selector-tag">sans-serif</span>;\n\n<span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">color</span>: $base-color;\n  <span class="hljs-attribute">font</span>: $base-font $heveltica;\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#444444</span>;\n  <span class="hljs-attribute">font</span>: <span class="hljs-number">16px</span> Helvetica, Arial, sans-serif;\n}\n</code></pre>\n<h4>Mixins</h4>\n<p>Mixins cung cấp một cách hòa trộn dễ dàng giữa các thuộc tính và giá trị và chia sẻ giữa các bộ chọn khác nhau.</p>\n<p>Mixins được định nghĩa bởi <strong>@mixin</strong> (SCSS) và <strong>=</strong> (Sass). Và bạn có thể gọi mixin bằng cách sử dụng <strong>@include</strong> (SCSS) hoặc <strong>+</strong> (Sass)</p>\n<pre class="hljs"><code><span class="hljs-keyword">@mixin</span> button($color, $color-hover) {\n  <span class="hljs-selector-tag">color</span>: $<span class="hljs-selector-tag">color</span>;\n  &amp;<span class="hljs-selector-pseudo">:hover</span> {\n    <span class="hljs-attribute">color</span>: $color-hover;\n  }\n}\n\n<span class="hljs-selector-class">.button</span> {\n  @include button(#fafafa, #aaa);\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.button</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fafafa</span>;\n}\n<span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;\n}\n</code></pre>\n<p><strong>Tham số mặc định</strong></p>\n<p>Ta sử dụng lại ví dụ trên với giá trị tham số mặc định. Và bạn có thể ghi đè lại nếu muốn.</p>\n<pre class="hljs"><code><span class="hljs-keyword">@mixin</span> button($<span class="hljs-attribute">color:</span> #fafafa, $<span class="hljs-attribute">color-hover:</span> #aaa) {\n  <span class="hljs-selector-tag">color</span>: $<span class="hljs-selector-tag">color</span>;\n  &amp;<span class="hljs-selector-pseudo">:hover</span> {\n    <span class="hljs-attribute">color</span>: $color-hover;\n  }\n}\n<span class="hljs-selector-class">.button</span> {\n  @include button(#ddd);\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.button</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ddd</span>;\n}\n<span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;\n}\n</code></pre>\n<p><strong>Nhiều biến tham số</strong></p>\n<p>Khi một hoặc nhiều giá trị trong tham số bạn có thể khai báo với với <strong>...</strong> trong mixin.</p>\n<pre class="hljs"><code><span class="hljs-keyword">@mixin</span> transition($trans...) {\n  <span class="hljs-selector-tag">-webkit-transition</span>: $<span class="hljs-selector-tag">trans</span>;\n  <span class="hljs-selector-tag">-moz-transition</span>: $<span class="hljs-selector-tag">trans</span>;\n  <span class="hljs-selector-tag">transition</span>: $<span class="hljs-selector-tag">trans</span>;\n}\n<span class="hljs-selector-class">.transition</span> {\n  @include transition(all 0.5s linear);\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.transition</span> {\n  <span class="hljs-attribute">-webkit-transition</span>: all <span class="hljs-number">0.5s</span> linear;\n  <span class="hljs-attribute">-moz-transition</span>: all <span class="hljs-number">0.5s</span> linear;\n  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span> linear;\n}\n</code></pre>\n<p><strong>@import</strong></p>\n<p>Trong Sass <strong>@import</strong> giúp bạn tổ chức cấu trúc các tập tin CSS được tốt hơn. Ta có thể xây dựng một cấu trúc cho website mình như sau:</p>\n<pre class="hljs"><code>web\n|--css\n|--sass\n  |--_normalize.scss\n  |--_typography.scss\n  |--_grid.scss\n  |--_form.scss\n  |--stylesheet.scss\n</code></pre>\n<p>Trong tập tin <strong>stylesheet.scss</strong> ta có thể khai báo như sau và sau đó biên dịch nó thành tập tin <strong>stylesheet.css</strong> duy nhất.</p>\n<pre class="hljs"><code><span class="hljs-keyword">@import</span> <span class="hljs-string">"normalize"</span>;\n<span class="hljs-keyword">@import</span> <span class="hljs-string">"typography"</span>;\n<span class="hljs-keyword">@import</span> <span class="hljs-string">"grid"</span>, <span class="hljs-string">"form"</span>;\n</code></pre>\n<h4>Kế thừa</h4>\n<p>Đây là tính năng giúp bạn sử dụng lại nhiều thuộc tính khai báo trong CSS.</p>\n<p><strong>Sử dụng @extend</strong></p>\n<pre class="hljs"><code><span class="hljs-selector-class">.alert</span> {\n  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcfcfc</span>;\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;\n}\n\n<span class="hljs-selector-class">.alert-success</span> {\n  @extend .alert;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#464646</span>;\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.alert</span> {\n  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcfcfc</span>;\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;\n}\n<span class="hljs-selector-class">.alert-success</span> {\n  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcfcfc</span>;\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#464646</span>;\n}\n</code></pre>\n<p><strong>Placeholder kế thừa</strong></p>\n<p>Đây là tính năng kế thừa nhằm tránh những khai báo thuộc tính không cần thiết. Bạn có thể khai báo placeholder kế thừa bằng <strong>%</strong></p>\n<pre class="hljs"><code>%<span class="hljs-selector-tag">alert</span> {\n  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcfcfc</span>;\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;\n}\n<span class="hljs-selector-class">.alert-success</span> {\n  @extend %alert;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#464646</span>;\n}\n<span class="hljs-selector-class">.alert-error</span> {\n  @extend %alert;\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#b94a48</span>;\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.alert-success</span>,\n<span class="hljs-selector-class">.alert-error</span> {\n  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcfcfc</span>;\n  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;\n}\n<span class="hljs-selector-class">.alert-success</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#464646</span>;\n}\n<span class="hljs-selector-class">.alert-error</span> {\n  <span class="hljs-attribute">color</span>: <span class="hljs-number">#b94a48</span>;\n}\n</code></pre>\n<p><strong>Kế thừa phần tử</strong></p>\n<p>Kế thừa trong Sass cũng hỗ trợ làm việc với các phần tử.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;\n  h3 {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;\n  }\n}\n<span class="hljs-selector-class">.sub-box</span> {\n  @extend .box;\n}\n</code></pre>\n<p>Biên dịch thành CSS.</p>\n<pre class="hljs"><code><span class="hljs-selector-class">.box</span>,\n<span class="hljs-selector-class">.sub-box</span> {\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;\n}\n<span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">h3</span>,\n<span class="hljs-selector-class">.sub-box</span> <span class="hljs-selector-tag">h3</span> {\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;\n}\n</code></pre>\n<h4>Các điều khiển trong Sass</h4>\n<p>Sass cung cấp cho bạn điều khiển logic sau:</p>\n<ul>\n<li>@if</li>\n<li>@for</li>\n<li>@each</li>\n<li>@while</li>\n</ul>\n<p>Muốn làm việc với các điều khiển trong Sass thì bạn nên có chút kiến thức lập trình cơ bản nên mình sẽ dành riêng một bài viết hướng dẫn chi tiết hơn.</p>\n<h3>Lời kết</h3>\n<p>Trên đây chỉ là tổng quan về Sass. Sass mang lại cho ta rất nhiều hữu ích tuy nhiên Sass không giúp ta có thể viết CSS tốt hơn. Vì thế bạn hãy nên tìm hiểu cách viết CSS tốt hơn như OOCSS (hướng đối tựng trong CSS), SMACSS, BEM...Và Sass sẽ là một công cụ tốt để bạn thực hiện việc đó.</p>\n'}},195:function(n,t){n.exports={attributes:{title:"Tạo MP3 Player với HTML5 và CSS3",slug:"tao-mp3-player-voi-html5-va-css3",date:"2013-10-06",tags:["css","javascript"]},html:'<p>Bạn muốn tự tạo MP3 Player với phong cách riêng của mình. HTML5 Audio giúp bạn dễ dàng tùy biến giao diện và dễ dàng nhúng vào trang web của bạn.</p>\n<p>Với các trình duyệt hỗ trợ HTML5 Audio, bạn có thể sử dụng:</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"audio.mp3"</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">"auto"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">loop</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Trình duyệt của bạn không hỗ trợ HTML5 Audio<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span>\nHoặc\n<span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">"auto"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">loop</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"audio.mp3"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"audio/mp3"</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Trình duyệt của bạn không hỗ trợ HTML5 Audio<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span>\n</code></pre>\n<p>Ở ví dụ trên ta đã sử dụng một số thuộc tính của HTML5 Audio:</p>\n<table>\n<thead>\n<tr>\n<th>Thuộc tính</th>\n<th>Mô tả</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autoplay</td>\n<td>Tập tin nhạc sẽ tự động chạy khi bắt đầu</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>Các điều khiển cho audio sẽ hiển thị theo mặc định của trình duyệt</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>Tập tin nhạc sẽ tự động lặp lại sau khi kết thúc</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>Tải thông tin của tập tin nhạc <br> - none: Không load thông tin tập nhạc <br> - auto: Tự động load thông tin tập tin nhạc <br> - metadata: Load các siêu dữ liệu của tập tin nhạc</td>\n</tr>\n<tr>\n<td>src</td>\n<td>Nguồn của tập tin nhạc</td>\n</tr>\n</tbody>\n</table>\n<h3>Tạo MP3 Player</h3>\n<p>Mình đã giới thiệu chung về HTML5 Audio. Giờ mình sẽ giới thiệu các bạn cách để xây dựng một MP3 Player cho riêng mình.</p>\n<h4>HTML</h4>\n<p>Đầu tiên mình sẽ xây dựng một audio với các thành phần sau:</p>\n<ul>\n<li>Tập tin nhạc</li>\n<li>Loading: tạo hiệu ứng đơn giản khi chạy nhạc</li>\n<li>Controls: gồm các điều khiển Play, Pause, Volumn, Seeking</li>\n</ul>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"player"</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"player__source"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"audio.mp3"</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Trình duyệt của bạn không hỗ trợ HTML5 Audio<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"player__loading"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"player__control"</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"playPause"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"currentTime"</span>&gt;</span>00:00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"seek"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"durationTime"</span>&gt;</span>00:00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"muted"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<h4>JavaScript</h4>\n<p>HTML5 Audio cung cấp nhiều sự kiện giúp bạn điều khiển và đồng bộ hóa phát lại tập tin nhạc.</p>\n<p>Muốn làm việc với HTML5 Audio đầu tiên ta truy vấn đến các thành phần audio mà ta đã xây dựng ở trên.</p>\n<pre class="hljs"><code><span class="hljs-keyword">var</span> player = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'player__source\'</span>),\n\tplayLoading = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">\'.player__loading span\'</span>),\n\tplayPause = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'playPause\'</span>),\n\tcurrentTime = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'currentTime\'</span>),\n\tseek = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'seek\'</span>),\n\tdurationTime = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'durationTime\'</span>),\n\tmuted = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'muted\'</span>);\n</code></pre>\n<p><strong>Play và Pause</strong></p>\n<p>Ta tiến hành kiểm tra nếu nhạc đang chạy sẽ nút Pause sẽ hiển thị và ngược lại.</p>\n<pre class="hljs"><code>playPause.addEventListener(<span class="hljs-string">\'click\'</span>, playPauseMusic, <span class="hljs-literal">false</span>);\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">playPauseMusic</span>(<span class="hljs-params"></span>) </span>{\n\t<span class="hljs-keyword">if</span> (player.paused) {\n\t\tplayer.play();\n\t\t<span class="hljs-comment">// Kiểm tra thời gian hiện tại của bài nhạc</span>\n\t\ttimeInterval = <span class="hljs-keyword">set</span><span class="hljs-title">Interval</span>(<span class="hljs-params">timeUpdateMusic, <span class="hljs-number">100</span></span>);\n\t\t// <span class="hljs-title">Thay</span> đổ<span class="hljs-title">i</span> <span class="hljs-title">gi</span>á <span class="hljs-title">tr</span>ị <span class="hljs-title">c</span>ủ<span class="hljs-title">a</span> <span class="hljs-title">seek</span>\n\t\t<span class="hljs-title">seek</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params"><span class="hljs-string">\'change\'</span>, seekMusic, false</span>);\n\t} <span class="hljs-title">else</span> {\n\t\tplayer.pause();\n\t}\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeUpdateMusic</span>(<span class="hljs-params"></span>) </span>{\n\t<span class="hljs-comment">// Thời gian toàn bộ của bài nhạc</span>\n\tdurationTime.innerHTML = player.duration;\n\t<span class="hljs-comment">// Thời gian hiện tại của bài nhạc</span>\n\tcurrentTime.innerHTML = player.currentTime;\n\tseek.max = player.duration;\n\tseek.value = player.currentTime;\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seekMusic</span>(<span class="hljs-params"></span>) </span>{\n\tplayer.currentTime = seek.value;\n}\n</code></pre>\n<p><strong>Volumn - Âm Thanh</strong></p>\n<p>Tương tự như Play và Pause, ta cũng kiểm tra volumn của nhạc đang tắt hay bật. Ở đây mình xây dựng volumn chỉ có hai chức năng mở âm thanh và tắt âm thanh.</p>\n<pre class="hljs"><code>muted.addEventListener(<span class="hljs-string">\'click\'</span>, mutedMusic, <span class="hljs-literal">false</span>);\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mutedMusic</span>(<span class="hljs-params"></span>) </span>{\n\t<span class="hljs-keyword">if</span> (player.muted) {\n\t\t<span class="hljs-comment">// Mở âm thanh</span>\n\t\tplayer.muted = <span class="hljs-literal">false</span>;\n\t} <span class="hljs-keyword">else</span> {\n\t\t<span class="hljs-comment">// Tắt âm thanh</span>\n\t\tplayer.muted = <span class="hljs-literal">true</span>;\n\t}\n}\n</code></pre>\n<h3>CSS3</h3>\n<p>Với CSS3 bạn có thể sử dụng CSS3 Animation và Transtion để làm cho Player của bạn sinh động hơn. Mình sẽ hướng dẫn chi tiết hơn ở những bài viết sau. Ở ví dụ dưới đây mình <strong><a href="/blog/su-dung-icon-fonts/">sử dụng icon font</a></strong> để làm các nút như play và volumn.</p>\n<p><iframe src="https://codesandbox.io/embed/web-simple-player-mp3-wmtxb?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n<p>Bạn có thể tham khảo các liên kết sau để có thể tìm hiểu sâu hơn về HTML5 Audio:</p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Events/Media_events">Mozilla Developer Network</a></li>\n<li><a href="http://html5doctor.com/html5-audio-the-state-of-play/">HTML5 Doctor</a></li>\n</ul>\n'}},196:function(n,t){n.exports={attributes:{title:"Thủ Thuật Sử Dụng Sublime Text 2",slug:"thu-thuat-su-dung-sublime-text-2",date:"2013-08-25",tags:["tools"]},html:'<p><strong><a href="http://www.sublimetext.com/2">Sublime Text 2</a></strong> là một text editor mạnh mẽ, cung cấp nhiều chức năng hữu ích. Mình cũng đã sử dụng Sublime Text 2 một thời gian dài cho đến nay, hôm nay cũng xin giới thiệu về Sublime Text 2 và một số thủ thuật sử dụng.</p>\n<p><img src="/images/blog/sublime_text_2.jpg" alt="Sublime Text 2"></p>\n<h3>Làm việc với Sublime Text 2</h3>\n<p>Nếu bạn chưa lần nào sử dụng Sublime Text 2, bạn có thể xem <strong><a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">series video miễn phí</a></strong> từ Tutsplus. Với series video này bạn sẽ cái nhìn tổng quan hơn về Sublime Text 2 và liệu nó có thể thuyết phục bạn sử dụng Sublime Text 2 không?</p>\n<h3>Package Control</h3>\n<p><img src="/images/blog/package_control.jpg" alt="Package Control - Sublime Text 2"></p>\n<p>Package Control là một công cụ quản lý các plugin của Sublime Text 2. Nó giúp bạn tìm kiếm, cài đặt, nâng cấp cũng hơn xóa các plugin.</p>\n<p>Việc cài đặt Package Control cũng rất đơn giản:</p>\n<ul>\n<li>Tải gói <a href="https://sublime.wbond.net/Package%20Control.sublime-package">Package Control.sublime-package</a></li>\n<li>Ở menu của Sublime Text 2 bạn chọn <strong>Preferences -&gt; Browse Package...</strong></li>\n<li>Lùi một thư mục và chọn thư mục <strong>Installed Packages</strong> và chép Package Control đã tải về vào đây. Khởi động lại Sublime Text 2.</li>\n</ul>\n<p>Để cài đặt plugin vào Sublime Text 2 bạn nhấn phím tắt <strong>Ctrl + Shift + P</strong> rồi gõ Install Package rồi tìm plugin bạn cần.</p>\n<p>Một số plugin mình đang sử dụng:</p>\n<ul>\n<li><a href="http://emmet.io/">Emmet</a>: là một bộ công cụ phát triển web với nhiều cải thiện quy trình làm việc với HTML/CSS. Đây là một công cụ hầu như không thể thiếu với các bạn làm việc nhiều với HTML, CSS như Web Designer hay Front-end Developer.</li>\n<li><a href="https://github.com/MarioRicalde/SCSS.tmbundle/">SCSS</a>/<a href="https://github.com/nathos/sass-textmate-bundle/">Sass</a>: Hỗ trợ Highlight Code cho SCSS và Sass. Với cú pháp Sass bạn mở <strong>Preferences -&gt; Browse Package...</strong> chọn <strong>Rails/Ruby Haml.tmLanguage</strong>. Bạn mở tập tin Ruby Haml.tmLanguage tìm đến dòng <strong>&lt;string&gt;sass&lt;/string&gt;</strong> và xóa nó đi.</li>\n<li><a href="https://github.com/titoBouzout/SideBarEnhancements/">SideBarEnhancements</a>: công cụ cải thiện nhiều chức năng cho Sidebar của Sublime Text 2. Hỗ trợ mở các tập tin với các ứng dụng được định nghĩa như Photoshop, trình duyệt...</li>\n<li><a href="https://github.com/spadgos/sublime-jsdocs/">DocBlockr</a>: Hỗ trợ comments các ngôn ngữ Javascript, PHP, CoffeeScript, Actionscript, C &amp; C++.</li>\n<li><a href="https://github.com/SublimeText/Tag/">Tag</a>: là plugin hỗ trợ làm việc các thẻ trong HTML và XML.</li>\n<li><a href="http://buymeasoda.github.io/soda-theme/">Theme Soda</a>: Cung cấp giao diện cho Sublime Text 2.</li>\n</ul>\n<h3>Một số phím tắt trong Sublime Text 2</h3>\n<p>Phím tắt giúp cho bạn làm việc hiệu quả hơn với các ứng dụng. Sublime Text cung cấp cho bạn nhiều phím tắt để có thể làm việc tốt hơn. Sau đây là một số phím tắt mình thường sử dụng.</p>\n<table>\n<thead>\n<tr>\n<th>Phím tắt</th>\n<th>Mô tả</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Ctrl + C</code></td>\n<td>Sao chép vùng được chọn</td>\n</tr>\n<tr>\n<td><code>Ctrl + V</code></td>\n<td>Dán vùng được sao chép</td>\n</tr>\n<tr>\n<td><code>Ctrl + X</code></td>\n<td>Cắt vùng được chọn (Xóa và sao chép vùng được chọn)</td>\n</tr>\n<tr>\n<td><code>Ctrl + D</code></td>\n<td>Chọn những từ giống nhau theo thứ tự (rất hiệu quả khi bạn muốn chỉnh sửa hàng loạt)</td>\n</tr>\n<tr>\n<td><code>Alt + F3</code></td>\n<td>Chọn tất cả những từ giống nhau</td>\n</tr>\n<tr>\n<td><code>Ctrl + Shift + D</code></td>\n<td>Nhân đôi dòng được chọn</td>\n</tr>\n<tr>\n<td><code>Ctrl + L</code></td>\n<td>Chọn dòng được chọn</td>\n</tr>\n<tr>\n<td><code>Ctrl + Shift + L</code></td>\n<td>Chọn nhiều dòng được chọn</td>\n</tr>\n<tr>\n<td><code>Ctrl + Space</code></td>\n<td>Gợi ý auto-complete</td>\n</tr>\n<tr>\n<td><code>Ctrl + P</code></td>\n<td>Truy cập tập tin và mở tập tin. <strong>@</strong> truy cập đến các biểu tượng (<code>Ctrl + R</code>), <strong>#</strong> tìm kiếm trong tập tin (Ctrl + ;), <strong>:</strong> tìm đến dòng trong tập tin (<code>Ctrl + G</code>).</td>\n</tr>\n<tr>\n<td><code>Ctrl + F</code></td>\n<td>Tìm kiếm</td>\n</tr>\n<tr>\n<td><code>Ctrl + H</code></td>\n<td>Tìm kiếm và thay thế</td>\n</tr>\n<tr>\n<td><code>Ctrl + Shift + F</code></td>\n<td>Tìm kiếm tất cả trong các tập tin</td>\n</tr>\n<tr>\n<td><code>Ctrl + KB</code></td>\n<td>Tắt mở sidebar</td>\n</tr>\n<tr>\n<td><code>Ctrl + Shift + Up</code></td>\n<td>Chuyển những dòng được chọn lên trên</td>\n</tr>\n<tr>\n<td><code>Ctrl + Shift + Down</code></td>\n<td>Chuyển những dòng được chọn xuống dưới</td>\n</tr>\n<tr>\n<td><code>Alt + Shift + 1</code></td>\n<td>Màn hình làm việc một cột (mặc định)</td>\n</tr>\n<tr>\n<td><code>Alt + Shift + 2</code></td>\n<td>Chia màn hình làm việc thành 2 cột theo chiều dọc</td>\n</tr>\n<tr>\n<td><code>Alt + Shift + 8</code></td>\n<td>Chia màn hình làm việc thành 2 cột theo chiều ngang</td>\n</tr>\n<tr>\n<td><code>Shift + F1</code></td>\n<td>Chuyển sang chế độ Free Mode (bạn muốn làm việc với một không gian rộng rãi hơn)</td>\n</tr>\n</tbody>\n</table>\n<h3>Lời kết</h3>\n<p>Hi vọng với những tính năng phong phú trên, Sublime Text 2 sẽ mang lại cho bạn sự lựa chọn mới ngoài những editor khác như Notepad++, Dreamweaver...</p>\n'}},197:function(n,t){n.exports={attributes:{title:"Tìm kiếm với Algolia, Hugo và Vue.js",slug:"tim-kiem-voi-algolia-hugo-va-vue",date:"2018-12-08T03:59:55.000Z",tags:["javascript","hugo","vue"]},html:'<p>Trước đây, muốn tìm kiếm bài viết, tôi thường vào <a href="/tags">danh mục</a> và tìm kiếm các tags như <code>javascript</code>, <code>sass</code>, <code>css</code>...Và với mong muốn tìm kiếm bài viết được tốt hơn nên tôi quyết định thử nghiệm với <a href="https://www.algolia.com/">Algolia</a>, kết hợp một xíu với <a href="/blog/bat-dau-voi-vue/">Vue.js</a>.</p>\n<h3>Tại sao là Algolia?</h3>\n<p>Thực ra đối với những người làm lập trình như tôi, thì lí do đầu tiên là được học thêm một công nghệ mới. Thứ hai là sau khi thử nghiệm Algolia, thời gian kết quả tìm kiếm mà Algolia trả về rất nhanh, làm tôi cũng rất bất ngờ và mong muốn tìm hiểu thêm về Algolia.</p>\n<p>Bên cạnh đó, qua quá trình mới làm quen với Algolia tôi thấy nó có những điểm nổi bật sau:</p>\n<ul>\n<li>Algolia cung cấp gói <a href="https://www.algolia.com/users/sign_up">miễn phí</a> cho bạn sử dụng</li>\n<li>Giao diện quản lý dễ sử dụng cho phép bạn theo dõi, truy vết và giám sát các hoạt động tìm kiếm</li>\n<li>Cung cấp các API Client cho nhiều ngôn ngữ như <code>JavaScript</code>, <code>Node.js</code>, <code>Go</code>, <code>C#</code></li>\n<li>Các thư viện Algolia cung cấp rất hay như <a href="https://github.com/algolia/autocomplete.js">Autocomplete</a>, <a href="https://community.algolia.com/places/">Algolia Places</a></li>\n</ul>\n<h3>Tạo JSON Search Index trong Hugo</h3>\n<p><strong>Algolia</strong> cung cấp tìm kiếm theo chỉ mục với các định dạng file <code>JSON</code>, <code>CSV</code> hoặc <code>TSV</code> hoặc sử dụng <a href="https://www.algolia.com/doc/api-reference/api-methods/">API</a> để thêm thông tin tìm kiếm được đánh chỉ mục.</p>\n<p>Với <strong>Hugo</strong> mình sẽ giới thiệu các bạn cách tạo ra một file <code>JSON</code> và tải tập tin đó lên Algolia.</p>\n<p>Đầu tiên, ta tạo một file <code>json</code> trong <strong>layouts/_default/</strong> hoặc <strong>themes/[tên-theme-của-bạn]/layouts/_default/</strong> với tên là <em><strong>list.algolia.json</strong></em> với cấu trúc như sau.</p>\n<pre class="hljs"><code>{{- $.Scratch.Add <span class="hljs-attr">"index"</span> slice -}}\n{{- $section := $.Site.GetPage <span class="hljs-string">"post"</span> .Section }}\n{{- range .Site.AllPages -}}\n  {{- if or (and (.IsDescendant $section) (and (not .Draft) (not .Params.private))) $section.IsHome -}}\n    {{- $.Scratch.Add <span class="hljs-attr">"index"</span> (dict <span class="hljs-attr">"objectID"</span> .File.UniqueID <span class="hljs-attr">"date"</span> .Date.UTC.Unix <span class="hljs-attr">"description"</span> .Description <span class="hljs-attr">"dir"</span> .File.Dir <span class="hljs-attr">"expirydate"</span> .ExpiryDate.UTC.Unix <span class="hljs-attr">"fuzzywordcount"</span> .FuzzyWordCount <span class="hljs-attr">"keywords"</span> .Keywords <span class="hljs-attr">"kind"</span> .Kind <span class="hljs-attr">"lang"</span> .Lang <span class="hljs-attr">"lastmod"</span> .Lastmod.UTC.Unix <span class="hljs-attr">"permalink"</span> .Permalink <span class="hljs-attr">"publishdate"</span> .PublishDate <span class="hljs-attr">"readingtime"</span> .ReadingTime <span class="hljs-attr">"relpermalink"</span> .RelPermalink <span class="hljs-attr">"summary"</span> .Summary <span class="hljs-attr">"title"</span> .Title <span class="hljs-attr">"type"</span> .Type <span class="hljs-attr">"url"</span> .Permalink <span class="hljs-attr">"weight"</span> .Weight <span class="hljs-attr">"wordcount"</span> .WordCount <span class="hljs-attr">"section"</span> .Section <span class="hljs-attr">"tags"</span> .Params.Tags <span class="hljs-attr">"categories"</span> .Params.Categories <span class="hljs-attr">"authors"</span> .Params.Authors)}}\n  {{- end -}}\n{{- end -}}\n{{- $.Scratch.Get <span class="hljs-attr">"index"</span> | jsonify -}}\n</code></pre>\n<p>Tập tin <code>JSON</code> sẽ mang những thông tin được định nghĩa ở trên như <code>authors</code>, <code>date</code>, <code>title</code>...</p>\n<p>Tập tin sẽ được tạo ra từ những thông tin các bài viết chứa trong thư mục <strong>post</strong>. Bạn có thể thay <strong>post</strong> bằng thư mục bài viết của bạn trong thư mục <strong>content</strong></p>\n<p>Ở đây tôi sử dụng một số <a href="https://gohugo.io/categories/functions">cú pháp về Functions</a> trong Hugo. Bạn có thể tham khảo thêm nhé.</p>\n<p>Tiếp theo ta mở tập tin <strong>config.toml</strong> và thêm một số cấu hình vào:</p>\n<pre class="hljs"><code><span class="hljs-section">[outputFormats.Algolia]</span>\n  baseName = "algolia"\n  isPlainText = true\n  mediaType = "application/json"\n  notAlternative = true\n\n<span class="hljs-section">[params.algolia]</span>\n  vars = <span class="hljs-section">["title", "description", "summary", "date", "lastmod", "permalink"]</span>\n  params = <span class="hljs-section">["categories", "tags"]</span>\n\n<span class="hljs-section">[outputs]</span>\n  home = <span class="hljs-section">["HTML", "RSS", "Algolia"]</span>\n</code></pre>\n<p>Sau đó bạn chạy lệnh</p>\n<pre class="hljs"><code><span class="hljs-meta">$</span><span class="bash"> hugo</span>\n</code></pre>\n<p>Bạn sẽ có một tập tin là <strong>algolia.json</strong> trong thư mục <strong>public</strong></p>\n<h3>Tải tập tin lên Alolia</h3>\n<p>Sau khi có tập tin <strong>algolia.json</strong> và <a href="https://www.algolia.com/users/sign_up">đăng ký</a> xong một tài khoản Algolia. Bạn đăng nhập vào <a href="https://www.algolia.com/dashboard">Algolia Dashboard</a>.</p>\n<ul>\n<li>\n<p>Bạn tạo một App sử dụng Algolia. Ở đây tôi ví dụ app có tên là <em>dangthanhblog</em></p>\n<p><img src="/images/blog/algolia_create_app.png" alt="Tạo app sử dụng Algolia"></p>\n</li>\n<li>\n<p>Ở giao diện Dashboard bạn chọn <strong>Indices</strong> và nhấn vào <strong>Create index</strong> giả sử với tên là <em>posts</em></p>\n<p><img src="/images/blog/algolia_create_index.png" alt="Tạo index trong Algolia"></p>\n<p>Chọn <strong>Manage index</strong> -&gt; <strong>Upload file</strong> chọn tập tin <strong>algolia.json</strong> trong thư mục <strong>public</strong> đã tạo được ở trên.</p>\n</li>\n<li>\n<p>Ngoài cách tải trực tiếp tập tin lên, bạn có thể dùng <a href="https://www.npmjs.com/package/atomic-algolia">atomic-algolia</a> để tải tập tin lên Algolia thông qua NPM scripts hoặc serverless nhé.</p>\n<pre class="hljs"><code><span class="hljs-meta">$</span><span class="bash"> npm install atomic-algolia dotenv --save-dev</span>\n</code></pre>\n<p>Tạo một file <code>.env</code> với các thông số</p>\n<pre class="hljs"><code>ALGOLIA_APP_ID=ALGOLIA_APP_ID\nALGOLIA_ADMIN_KEY=YOUR_ALGOLIA_ADMIN_KEY\nALGOLIA_INDEX_NAME=posts\nALGOLIA_INDEX_FILE=algolia.json\n</code></pre>\n<p>Ở đây tôi giả sử indexName tôi sử dụng là <strong>posts</strong> và tập tin có tên là <strong>algolia.json</strong></p>\n<p>Sử dụng NPM scripts trong <strong>package.json</strong></p>\n<pre class="hljs"><code><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-attr">"algolia"</span>: <span class="hljs-string">"atomic-algolia"</span>\n}\n</code></pre>\n<p>Chạy lệnh để tải file <code>algolia.json</code> lên Algolia</p>\n<pre class="hljs"><code>$ npm run algolia\n</code></pre>\n</li>\n</ul>\n<h3>Tạo Algolia Component với Vue.js</h3>\n<p>Để hiển thị trên Hugo. tôi tạo ra một trang <code>static templates</code> với tên gọi là <code>archives.md</code> trong thư mục <strong>content</strong> như sau:</p>\n<pre class="hljs"><code>---\ntype: "static"\n<span class="hljs-section">layout: "archives"\n---</span>\n</code></pre>\n<p>Sau đó tạo thêm file HTML có tên là <strong>layouts/static/archives.html</strong> tương ứng với <code>layout</code> được khai báo ở trên.</p>\n<p>Algolia cung cấp một thư viện JavaScript để bạn dễ dàng kết với Algolia thông qua <a href="https://community.algolia.com/instantsearch.js/">Instantsearch.js</a> hoặc <a href="https://v2--vue-instantsearch.netlify.com/getting-started/migration.html">Vue Instantsearch</a>.</p>\n<p>Vì tôi đã <a href="/blog/bat-dau-voi-vue/">giới thiệu Vue.js</a> có một tính năng rất hay đó là Component. Nên tôi quyết định viết Component này sử dụng <a href="https://v2--vue-instantsearch.netlify.com/getting-started/migration.html">Vue InstantSearch</a> vừa giúp bạn biết thêm về cách xây dựng Component trong Vue thông qua thuộc tính <em><strong>props</strong></em>.</p>\n<pre class="hljs"><code>Vue.component(<span class="hljs-string">\'SearchAlgoliaComponent\'</span>, {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">\'SearchAlgoliaComponent\'</span>,\n  <span class="hljs-attr">template</span>: <span class="hljs-string">`\n    &lt;ais-index\n      :app-id="appId"\n      :api-key="apiKey"\n      :index-name="indexName"\n      :routing="true"&gt;\n      &lt;ais-search-box placeholder="Tìm kiếm tiêu đề hoặc nội dung bài viết..."&gt;&lt;/ais-search-box&gt;\n      &lt;ais-highlight :hit="hit" attribute="title"&gt;&lt;/ais-highlight&gt;\n      &lt;ais-results&gt;\n        // Your display results\n      &lt;/ais-results&gt;\n    &lt;/ais-index&gt;\n  `</span>,\n  <span class="hljs-attr">props</span>: {\n    <span class="hljs-attr">appId</span>: {\n      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,\n      <span class="hljs-attr">require</span>: <span class="hljs-literal">true</span>\n    },\n    <span class="hljs-attr">apiKey</span>: {\n      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,\n      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>\n    },\n    <span class="hljs-attr">indexName</span>: {\n      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,\n      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>\n    },\n    <span class="hljs-attr">routing</span>: {\n      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Boolean</span>,\n      <span class="hljs-attr">default</span>: <span class="hljs-literal">true</span>\n    }\n  }\n});\n</code></pre>\n<p>Vậy là ta đã có một Component sử dụng Vue cho Algolia. Giờ ta sẽ sử dụng nó trong <strong>layouts/static/archives.html</strong> nhé.</p>\n<pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">search-algolia-component</span> \n    <span class="hljs-attr">:appId</span>=<span class="hljs-string">"yourAppId"</span> \n    <span class="hljs-attr">:apiKey</span>=<span class="hljs-string">"yourApiKey"</span> \n    <span class="hljs-attr">:indexName</span>=<span class="hljs-string">"yourIndexName"</span>/&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>\n</code></pre>\n<p><strong>appId</strong> và <strong>apiKey</strong> bạn vào trong Dashboard của Algolia và chọn <strong>API keys</strong> để lấy thông tin nhé.</p>\n<p>Giờ ta đã có một trang tìm kiếm sử dụng Algolia, Hugo và Vue.js. Bạn có thể <a href="/archives/">trải nghiệm</a> hoặc có thể chỉnh sửa thêm cho <code>SearchAlgoliaComponent</code> theo cách bạn muốn hiển thị nhé.</p>\n'}},198:function(n,t){n.exports={attributes:{title:"Web Storage",slug:"web-storage",date:"2013-08-10",tags:["javascript"]},html:'<p>Để lưu trữ thông tin ở phía trình duyệt, trước đây ta vẫn thường dùng cookies. Nhưng cookies vẫn còn một số hạn chế:</p>\n<ul>\n<li>Khi truyền tải, cookies mang theo HTTP request, đều này sẽ làm chậm đi ứng dụng web của bạn.</li>\n<li>Giới hạn dung lượng thấp chỉ 4 KB.</li>\n<li>Thật khó để duy dõi nhiều cookies trên một trang web.</li>\n</ul>\n<p>HTML5 cung cấp một API mới để có thể lưu trữ dữ liệu ở phía client với nhiều cải thiện cho cookies là web storage. Một số ưu điểm web storage so với cookies:</p>\n<ul>\n<li>Dung lượng lên đến 5 MB (trình duyệt Google Chrome, Mozilla Firefox, Opera), 10 MB (Internet Explorer)</li>\n<li>Dữ liệu web storage sẽ không được truyền đến máy chủ</li>\n<li>Cung cấp hai cách lưu trữ khác nhau: local storage và session storage</li>\n</ul>\n<h3>Web Storage</h3>\n<p>Web Storage hiện tại đã hỗ trợ rất nhiều trình duyệt.</p>\n\x3c!-- caniuse features="namevalue-storage"  --\x3e\n<p>Web Storage cung cấp các phương thức sau. Ở đây mình sử dụng localStorage, bạn có thể sử dụng sessionStorage nếu muốn.</p>\n<pre class="hljs"><code>localStorage.setItem(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>) <span class="hljs-comment">// Lưu trữ dữ liệu</span>\nlocalStorage.getItem(<span class="hljs-string">\'key\'</span>)          <span class="hljs-comment">// Lấy dữ liệu</span>\nlocalStorage.removeItem(<span class="hljs-string">\'key\'</span>)       <span class="hljs-comment">// Xóa dữ liệu lưu trên key</span>\nlocalStorage.clear()                 <span class="hljs-comment">// Xóa tất cả dữ liệu lưu bởi web storage</span>\n</code></pre>\n<h3>Sử dụng Local Storage</h3>\n<p>Dữ liệu trên local storage sẽ được tự động chuyển sang kiểu \'string\' trên trình duyệt. Tuy nhiên local storage lại hoạt động rất tốt với đối tượng trong JavaScript.</p>\n<pre class="hljs"><code><span class="hljs-comment">// Lưu trữ một đối tượng</span>\nlocalStorage.setItem(<span class="hljs-string">\'key\'</span>, {<span class="hljs-attr">name</span>: <span class="hljs-string">\'value\'</span>});\n<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> localStorage.getItem(<span class="hljs-string">\'key\'</span>)); <span class="hljs-comment">// string</span>\n\n<span class="hljs-comment">// Lữu trữ một kiểu số</span>\nlocalStorage.setItem(<span class="hljs-string">\'key\'</span>, <span class="hljs-number">1</span>);\n<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> localStorage.getItem(<span class="hljs-string">\'key\'</span>)); <span class="hljs-comment">// string</span>\n\n<span class="hljs-comment">// Lưu trữ một đối tượng</span>\nlocalStorage.setItem(<span class="hljs-string">\'key\'</span>, <span class="hljs-built_in">JSON</span>.stringify({<span class="hljs-attr">name</span>: <span class="hljs-string">\'Dang Thanh\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>}));\n<span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(localStorage.getItem(<span class="hljs-string">\'key\'</span>));\n<span class="hljs-built_in">console</span>.log(obj.name); <span class="hljs-comment">// value</span>\n<span class="hljs-built_in">console</span>.log(obj.age);  <span class="hljs-comment">// value</span>\n</code></pre>\n<h3>Ví dụ Local Storage</h3>\n<p><iframe src="https://codesandbox.io/embed/web-local-storage-no1iq?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></p>\n'}},199:function(n,t,l){var content=l(204);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,l(61).default)("5f6c3350",content,!0,{sourceMap:!1})},202:function(n,t,l){var map={"./blog/bat-dau-voi-vue.md":181,"./blog/blog-va-toi.md":182,"./blog/checkboxes-jquery-plugin.md":183,"./blog/classes-javascript-va-vue.md":184,"./blog/css-triangles-mixin-trong-sass.md":185,"./blog/do-bong-mixin-voi-text-shadow.md":186,"./blog/functional-css.md":187,"./blog/gioi-thieu-css3-transform.md":188,"./blog/html5-fullscreen-api.md":189,"./blog/html5-geolocation-va-leaflet.md":190,"./blog/postcss.md":191,"./blog/redesign-va-nhung-gi-tui-hoc.md":192,"./blog/su-dung-icon-fonts.md":193,"./blog/su-dung-sass.md":194,"./blog/tao-mp3-player-voi-html5-va-css3.md":195,"./blog/thu-thuat-su-dung-sublime-text-2.md":196,"./blog/tim-kiem-voi-algolia-hugo-va-vue.md":197,"./blog/web-storage.md":198};function c(n){var t=e(n);return l(t)}function e(n){if(!l.o(map,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return map[n]}c.keys=function(){return Object.keys(map)},c.resolve=e,n.exports=c,c.id=202},203:function(n,t,l){"use strict";var c=l(199);l.n(c).a},204:function(n,t,l){(t=l(60)(!1)).push([n.i,"",""]),n.exports=t},210:function(n,t,l){"use strict";l.r(t);l(130);var c=l(58),e=(l(34),l(25),l(30),l(10)),h={asyncData:function(){return Object(e.a)(regeneratorRuntime.mark((function n(){var t,e;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=l(202),e=t.keys().map((function(n){var l=n.match(/\/(.+)\.md$/);Object(c.a)(l,2)[1];return t(n)})).sort((function(a,b){return new Date(b.attributes.date)-new Date(a.attributes.date)})),n.abrupt("return",{posts:e});case 3:case"end":return n.stop()}}),n)})))()}},o=(l(203),l(27)),component=Object(o.a)(h,(function(){var n=this,t=n.$createElement,l=n._self._c||t;return l("div",{staticClass:"max-w-2xl mx-auto px-5"},n._l(n.posts,(function(t,i){return l("article",{key:t.attributes.title,staticClass:"rounded mb-4 overflow-hidden"},[l("div",{staticClass:"relative",class:{"pb-2":0===i,"py-2":0!==i}},[l("time",{staticClass:"text-gray-600 text-sm"},[n._v(n._s(n.$dateFns.format(t.attributes.date,"MMMM dd, yyyy")))]),n._v(" "),l("h2",{staticClass:"font-merriweather m-0 mb-3"},[l("NuxtLink",{attrs:{to:"/blog/"+t.attributes.slug}},[n._v(n._s(t.attributes.title))])],1)])])})),0)}),[],!1,null,null,null);t.default=component.exports}}]);