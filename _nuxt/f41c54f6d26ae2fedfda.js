(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{184:function(n,l){n.exports={attributes:{title:"Classes Javascript và Vue.js",slug:"classes-javascript-va-vue",date:"2019-03-16T15:31:48.000Z",tags:["javascript","vue"]},html:'<p>Trước tôi đã giới thiệu cho các bạn về <a href="/blog/bat-dau-voi-vue/#2-components">Component trong Vue.js</a>. Bây giờ chúng ta thử tạo một component để tạo một <em>User</em> như sau:</p>\n<pre class="hljs"><code>&lt;template&gt;\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.firstName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.lastName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.hobby"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"fullName"</span>&gt;</span>{{ fullName }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"handlerAddNewUser"</span>&gt;</span>Add New User<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">import</span> UserService <span class="hljs-keyword">from</span> <span class="hljs-string">\'@services/user\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">\'Comment\'</span>,\n  data() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">user</span>: {\n        <span class="hljs-attr">fistName</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">lastName</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">hobby</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">created</span>: <span class="hljs-number">0</span>\n      }\n    }\n  },\n  <span class="hljs-attr">computed</span>: {\n    fullName() {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>.firstName}</span> <span class="hljs-subst">${<span class="hljs-keyword">this</span>.lastName}</span>`</span>\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> handlerAddNewUser() {\n      <span class="hljs-keyword">await</span> UserService.post(<span class="hljs-string">\'/add\'</span>, {\n        <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">this</span>.user.firstName,\n        <span class="hljs-attr">lastName</span>: <span class="hljs-keyword">this</span>.user.lastName,\n        <span class="hljs-attr">hobby</span>: <span class="hljs-keyword">this</span>.user.hobby,\n        <span class="hljs-attr">created</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()\n      });\n  \n      <span class="hljs-comment">// Reset form</span>\n      <span class="hljs-keyword">this</span>.user.firstName = <span class="hljs-string">\'\'</span>;\n      <span class="hljs-keyword">this</span>.user.lastName = <span class="hljs-string">\'\'</span>;\n      <span class="hljs-keyword">this</span>.user.hobby = <span class="hljs-string">\'\'</span>;\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>\n</code></pre>\n<p>Component viết kiểu này chúng ta rất hay thường dùng. Code trên vẫn chạy ổn.</p>\n<p>Vấn đề ở đây chũng ta sẽ gặp phải là:</p>\n<ul>\n<li>Component càng ngày càng phát triển, và có thể sẽ có thêm nhiều thuộc tính Comment nữa</li>\n<li>Ở đây chúng ta lặp đi lặp lại <code>this.user</code> và có thể dẫn đến một số lỗi không mong muốn như dễ dàng bỏ qua một vài thuộc tính khi có nhiều đoạn code hơn.</li>\n<li>Không thể tái sử dụng những hàm logic cho các component khác.</li>\n</ul>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">Classes JavaScript</a> là một tính năng được giới thiệu trong ECMAScript 2015 (hay thường gọi là ES6). Và ở đây tôi sử dụng Classess của ES6 để khắc phục những vấn đề trên và sử dụng chung với Vue.js</p>\n<p>Đầu tiên tôi sẽ khởi tạo một classes như sau:</p>\n<pre class="hljs"><code><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>() </span>{\n  <span class="hljs-keyword">constructor</span>(user = {}) {\n    <span class="hljs-keyword">this</span>.firstName = user.firstName ? user.firstName : <span class="hljs-string">\'\'</span>;\n    <span class="hljs-keyword">this</span>.lastName = user.lastName ? user.lastName : <span class="hljs-string">\'\'</span>;\n    <span class="hljs-keyword">this</span>.hobby = user.hobby ? user.hobby : <span class="hljs-string">\'\'</span>;\n    <span class="hljs-keyword">this</span>.created = <span class="hljs-number">0</span>;\n  }\n\n  <span class="hljs-keyword">get</span> <span class="hljs-title">fullName</span>() {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>.firstName}</span> <span class="hljs-subst">${<span class="hljs-keyword">this</span>.lastName}</span>`</span>\n  }\n\n  createPayload() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">this</span>.firstName,\n      <span class="hljs-attr">lastName</span>: <span class="hljs-keyword">this</span>.lastName,\n      <span class="hljs-attr">hobby</span>: <span class="hljs-keyword">this</span>.hobby,\n      <span class="hljs-attr">created</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()\n    }\n  }\n}\n</code></pre>\n<p>Giờ ta sẽ trở lại với Component ở trên</p>\n<pre class="hljs"><code>&lt;template&gt;\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.firstName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.lastName"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"user.hobby"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"user.name"</span>&gt;</span>{{ user.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"handlerAddNewUser"</span>&gt;</span>Add New User<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">import</span> UserService <span class="hljs-keyword">from</span> <span class="hljs-string">\'@/services/user\'</span>;\n<span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">\'@/constructor/user\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">\'Comment\'</span>,\n  data() {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">user</span>: <span class="hljs-keyword">new</span> User()\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> handlerAddNewUser() {\n      <span class="hljs-keyword">await</span> UserService.post(<span class="hljs-string">\'/add\'</span>, <span class="hljs-keyword">this</span>.user.createPayload());\n  \n      <span class="hljs-comment">// Reset form</span>\n      <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>.user, <span class="hljs-keyword">new</span> User())\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>\n</code></pre>\n<p>Ở đây ta thấy rằng:</p>\n<ul>\n<li>Việc quản lý lỗi không mong muốn cho từng thuộc tính của User sẽ đơn giản hơn</li>\n<li>Các thuộc tính <code>computed</code> sử dụng Component của Vue.js sẽ tự động có sẵn trong khởi tạo của User</li>\n<li>Việc quản lý logic ở một nơi sẽ giúp bạn dễ dàng kiểm soát và tái sử dụng</li>\n</ul>\n<h3>Ý kiến chuyên gia</h3>\n<p>Theo một số ý kiến chuyên gia thì <a href="https://twitter.com/_ericelliott/status/573090480004591617">không nên sử dụng ES6 Classes</a>. Nhưng theo tôi trong trường hợp này việc sử dụng Classes trong Vue.js giúp cải thiện khả năng quản lý lỗi cũng như logic được tốt hơn.</p>\n'}}}]);